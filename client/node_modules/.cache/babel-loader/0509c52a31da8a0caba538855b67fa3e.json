{"ast":null,"code":"import categoryActionTypes from \"./category.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nexport const fetchCategoryStart = () => {\n  return {\n    type: categoryActionTypes.FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_START\n  };\n};\nexport const fetchCategorySuccess = ({\n  categoryList,\n  productTypeList,\n  discountProductList,\n  topRatedProducts,\n  bestSellerProducts,\n  productList,\n  numProducts,\n  numPages,\n  currentPage,\n  maxPrice\n}) => ({\n  type: categoryActionTypes.FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_SUCCESS,\n  payload: {\n    categoryList,\n    productTypeList,\n    discountProductList,\n    topRatedProducts,\n    bestSellerProducts,\n    productList,\n    numProducts,\n    numPages,\n    currentPage,\n    maxPrice\n  }\n});\nexport const fetchCategoryFail = err => {\n  return {\n    type: categoryActionTypes.FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_FAIL,\n    payload: {\n      msg: err.response.data.message,\n      status: err.response.status\n    }\n  };\n};\nexport const fetchCategory = (categoryId, min_price, max_price, page = 1) => async dispatch => {\n  try {\n    console.log(min_price, max_price);\n    dispatch(fetchCategoryStart());\n    let {\n      data\n    } = await axios.get(urls.GET_CONTENT_LIST_BY_CATEGORY_PATH_URL(categoryId, +min_price, +max_price, page));\n    data.currentPage = page;\n    dispatch(fetchCategorySuccess(data));\n  } catch (error) {\n    dispatch(fetchCategoryFail(error));\n  }\n};\nexport const setCurrentPage = curPage => ({\n  type: categoryActionTypes.SET_CURRENT_PAGE,\n  payload: curPage\n}); // export const fetchProductListStart = () => ({\n//   type: categoryActionTypes.FETCH_PRODUCT_LIST_START,\n// });\n// export const fetchProductListSuccess = (productList) => ({\n//   type: categoryActionTypes.FETCH_PRODUCT_LIST_SUCCESS,\n//   payload: productList,\n// });\n// export const fetchProductListFail = (err) => ({\n//   type: categoryActionTypes.FETCH_PRODUCT_LIST_FAIL,\n//   payload: { msg: err.response.data.message, status: err.response.status },\n// });\n// export const fetchProductList = (categoryId, page) => async (dispatch) => {\n//   try {\n//     dispatch(fetchProductListStart());\n//     const { data } = await axios.get(\n//       urls.GET_PRODUCT_LIST_PER_PAGE_BY_CATEGORY_PATH_URL(categoryId, page)\n//     );\n//     dispatch(fetchProductListSuccess(data));\n//   } catch (error) {\n//     dispatch(fetchCategoryFail(error));\n//   }\n// };\n// const filterProductsByPriceStart = () => ({\n//   type: categoryActionTypes.FILTER_PRODUCTS_BY_PRICE_START,\n// });\n// const filterProductsByPriceSuccess = (\n//   categoryList,\n//   productList,\n//   numProducts,\n//   currentPage,\n//   numPages,\n//   maxPrice\n// ) => ({\n//   type: categoryActionTypes.FILTER_PRODUCTS_BY_PRICE_SUCCESS,\n//   payload: {\n//     categoryList,\n//     productList,\n//     numProducts,\n//     currentPage,\n//     numPages,\n//     maxPrice,\n//   },\n// });\n// const filterProductsByPriceFail = (err) => ({\n//   type: categoryActionTypes.FILTER_PRODUCTS_BY_PRICE_FAIL,\n//   payload: { msg: err.response.data.message, status: err.response.status },\n// });\n// export const filterProductsByPrice = (\n//   categoryPath,\n//   minPriceChange,\n//   maxPriceChange,\n//   page = 1\n// ) => async (dispatch) => {\n//   try {\n//     dispatch(filterProductsByPriceStart());\n//     const {\n//       data: {\n//         categoryList,\n//         productList,\n//         numProducts,\n//         currentPage,\n//         numPages,\n//         maxPrice,\n//       },\n//     } = await axios.get(\n//       urls.GET_PRODUCT_LIST_BY_FILTER_PRICE_IN_CATEGORY(\n//         categoryPath,\n//         minPriceChange,\n//         maxPriceChange,\n//         page\n//       )\n//     );\n//     dispatch(\n//       filterProductsByPriceSuccess(\n//         categoryList,\n//         productList,\n//         numProducts,\n//         currentPage,\n//         numPages,\n//         maxPrice\n//       )\n//     );\n//   } catch (error) {\n//     dispatch(filterProductsByPriceFail(error));\n//   }\n// };","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/redux/category/category.actions.js"],"names":["categoryActionTypes","axios","urls","fetchCategoryStart","type","FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_START","fetchCategorySuccess","categoryList","productTypeList","discountProductList","topRatedProducts","bestSellerProducts","productList","numProducts","numPages","currentPage","maxPrice","FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_SUCCESS","payload","fetchCategoryFail","err","FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_FAIL","msg","response","data","message","status","fetchCategory","categoryId","min_price","max_price","page","dispatch","console","log","get","GET_CONTENT_LIST_BY_CATEGORY_PATH_URL","error","setCurrentPage","curPage","SET_CURRENT_PAGE"],"mappings":"AAAA,OAAOA,mBAAP,MAAgC,kBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAM;AACtC,SAAO;AACLC,IAAAA,IAAI,EAAEJ,mBAAmB,CAACK;AADrB,GAAP;AAGD,CAJM;AAKP,OAAO,MAAMC,oBAAoB,GAAG,CAAC;AACnCC,EAAAA,YADmC;AAEnCC,EAAAA,eAFmC;AAGnCC,EAAAA,mBAHmC;AAInCC,EAAAA,gBAJmC;AAKnCC,EAAAA,kBALmC;AAMnCC,EAAAA,WANmC;AAOnCC,EAAAA,WAPmC;AAQnCC,EAAAA,QARmC;AASnCC,EAAAA,WATmC;AAUnCC,EAAAA;AAVmC,CAAD,MAW7B;AACLZ,EAAAA,IAAI,EAAEJ,mBAAmB,CAACiB,+CADrB;AAELC,EAAAA,OAAO,EAAE;AACPX,IAAAA,YADO;AAEPC,IAAAA,eAFO;AAGPC,IAAAA,mBAHO;AAIPC,IAAAA,gBAJO;AAKPC,IAAAA,kBALO;AAMPC,IAAAA,WANO;AAOPC,IAAAA,WAPO;AAQPC,IAAAA,QARO;AASPC,IAAAA,WATO;AAUPC,IAAAA;AAVO;AAFJ,CAX6B,CAA7B;AA0BP,OAAO,MAAMG,iBAAiB,GAAIC,GAAD,IAAS;AACxC,SAAO;AACLhB,IAAAA,IAAI,EAAEJ,mBAAmB,CAACqB,4CADrB;AAELH,IAAAA,OAAO,EAAE;AACPI,MAAAA,GAAG,EAAEF,GAAG,CAACG,QAAJ,CAAaC,IAAb,CAAkBC,OADhB;AAEPC,MAAAA,MAAM,EAAEN,GAAG,CAACG,QAAJ,CAAaG;AAFd;AAFJ,GAAP;AAOD,CARM;AAUP,OAAO,MAAMC,aAAa,GAAG,CAACC,UAAD,EAAaC,SAAb,EAAwBC,SAAxB,EAAmCC,IAAI,GAAG,CAA1C,KAAgD,MAAOC,QAAP,IAAoB;AAC/F,MAAI;AACFC,IAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ,EAAuBC,SAAvB;AACAE,IAAAA,QAAQ,CAAC7B,kBAAkB,EAAnB,CAAR;AACA,QAAI;AAAEqB,MAAAA;AAAF,QAAW,MAAMvB,KAAK,CAACkC,GAAN,CACnBjC,IAAI,CAACkC,qCAAL,CAA2CR,UAA3C,EAAsD,CAACC,SAAvD,EAAkE,CAACC,SAAnE,EAA8EC,IAA9E,CADmB,CAArB;AAGAP,IAAAA,IAAI,CAACT,WAAL,GAAmBgB,IAAnB;AACAC,IAAAA,QAAQ,CAAC1B,oBAAoB,CAACkB,IAAD,CAArB,CAAR;AACD,GARD,CAQE,OAAOa,KAAP,EAAc;AACdL,IAAAA,QAAQ,CAACb,iBAAiB,CAACkB,KAAD,CAAlB,CAAR;AACD;AACF,CAZM;AAcP,OAAO,MAAMC,cAAc,GAAIC,OAAD,KAAc;AAC1CnC,EAAAA,IAAI,EAAEJ,mBAAmB,CAACwC,gBADgB;AAE1CtB,EAAAA,OAAO,EAAEqB;AAFiC,CAAd,CAAvB,C,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import categoryActionTypes from \"./category.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nexport const fetchCategoryStart = () => {\n  return {\n    type: categoryActionTypes.FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_START,\n  };\n};\nexport const fetchCategorySuccess = ({\n  categoryList,\n  productTypeList,\n  discountProductList,\n  topRatedProducts,\n  bestSellerProducts,\n  productList,\n  numProducts,\n  numPages,\n  currentPage,\n  maxPrice,\n}) => ({\n  type: categoryActionTypes.FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_SUCCESS,\n  payload: {\n    categoryList,\n    productTypeList,\n    discountProductList,\n    topRatedProducts,\n    bestSellerProducts,\n    productList,\n    numProducts,\n    numPages,\n    currentPage,\n    maxPrice,\n  },\n});\nexport const fetchCategoryFail = (err) => {\n  return {\n    type: categoryActionTypes.FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_FAIL,\n    payload: {\n      msg: err.response.data.message,\n      status: err.response.status,\n    },\n  };\n};\n\nexport const fetchCategory = (categoryId, min_price, max_price, page = 1) => async (dispatch) => {\n  try {\n    console.log(min_price, max_price)\n    dispatch(fetchCategoryStart());\n    let { data } = await axios.get(\n      urls.GET_CONTENT_LIST_BY_CATEGORY_PATH_URL(categoryId,+min_price, +max_price, page)\n    );\n    data.currentPage = page;\n    dispatch(fetchCategorySuccess(data));\n  } catch (error) {\n    dispatch(fetchCategoryFail(error));\n  }\n};\n\nexport const setCurrentPage = (curPage) => ({\n  type: categoryActionTypes.SET_CURRENT_PAGE,\n  payload: curPage,\n});\n\n// export const fetchProductListStart = () => ({\n//   type: categoryActionTypes.FETCH_PRODUCT_LIST_START,\n// });\n// export const fetchProductListSuccess = (productList) => ({\n//   type: categoryActionTypes.FETCH_PRODUCT_LIST_SUCCESS,\n//   payload: productList,\n// });\n// export const fetchProductListFail = (err) => ({\n//   type: categoryActionTypes.FETCH_PRODUCT_LIST_FAIL,\n//   payload: { msg: err.response.data.message, status: err.response.status },\n// });\n\n// export const fetchProductList = (categoryId, page) => async (dispatch) => {\n//   try {\n//     dispatch(fetchProductListStart());\n//     const { data } = await axios.get(\n//       urls.GET_PRODUCT_LIST_PER_PAGE_BY_CATEGORY_PATH_URL(categoryId, page)\n//     );\n//     dispatch(fetchProductListSuccess(data));\n//   } catch (error) {\n//     dispatch(fetchCategoryFail(error));\n//   }\n// };\n\n// const filterProductsByPriceStart = () => ({\n//   type: categoryActionTypes.FILTER_PRODUCTS_BY_PRICE_START,\n// });\n// const filterProductsByPriceSuccess = (\n//   categoryList,\n//   productList,\n//   numProducts,\n//   currentPage,\n//   numPages,\n//   maxPrice\n// ) => ({\n//   type: categoryActionTypes.FILTER_PRODUCTS_BY_PRICE_SUCCESS,\n//   payload: {\n//     categoryList,\n//     productList,\n//     numProducts,\n//     currentPage,\n//     numPages,\n//     maxPrice,\n//   },\n// });\n// const filterProductsByPriceFail = (err) => ({\n//   type: categoryActionTypes.FILTER_PRODUCTS_BY_PRICE_FAIL,\n//   payload: { msg: err.response.data.message, status: err.response.status },\n// });\n\n// export const filterProductsByPrice = (\n//   categoryPath,\n//   minPriceChange,\n//   maxPriceChange,\n//   page = 1\n// ) => async (dispatch) => {\n//   try {\n//     dispatch(filterProductsByPriceStart());\n//     const {\n//       data: {\n//         categoryList,\n//         productList,\n//         numProducts,\n//         currentPage,\n//         numPages,\n//         maxPrice,\n//       },\n//     } = await axios.get(\n//       urls.GET_PRODUCT_LIST_BY_FILTER_PRICE_IN_CATEGORY(\n//         categoryPath,\n//         minPriceChange,\n//         maxPriceChange,\n//         page\n//       )\n//     );\n//     dispatch(\n//       filterProductsByPriceSuccess(\n//         categoryList,\n//         productList,\n//         numProducts,\n//         currentPage,\n//         numPages,\n//         maxPrice\n//       )\n//     );\n//   } catch (error) {\n//     dispatch(filterProductsByPriceFail(error));\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}