{"ast":null,"code":"import { put, takeLatest, call, all, delay } from \"redux-saga/effects\";\nimport { registerSuccess, registerFail, fetchUserSuccess, fetchUserStart, fetchUserFail, logout } from \"./user.actions\";\nimport userActionTypes from \"./user.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nimport setAuthToken from \"../../utils/setAuthToken\";\n\nfunction* checkAuthTimeout(userExpDate) {\n  console.log(userExpDate);\n  yield delay(userExpDate * 1000);\n  yield put(logout());\n  yield call(setAuthToken, null);\n}\n\nfunction* register({\n  payload: {\n    name,\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      data: {\n        token,\n        user,\n        expDate\n      }\n    } = yield axios.post(urls.REGISTER_URL, {\n      name,\n      email,\n      password\n    });\n    localStorage.setItem(\"userToken\", token);\n    localStorage.setItem(\"userExpDate\", new Date(Date.now() + expDate * 1000));\n    setAuthToken(token);\n    yield put(registerSuccess(user));\n    yield put(checkAuthTimeout(0.2));\n  } catch (error) {\n    yield put(registerFail(error.message));\n  }\n}\n\nfunction* fetchUser() {\n  try {\n    if (!localStorage.token || !localStorage.expDate) {\n      throw new Error(\"Authentication denied\");\n    }\n\n    if (!localStorage.expDate || Date.parse(localStorage.expDate) < Date.now()) {\n      localStorage.removeItem(\"userExpDate\");\n      localStorage.removeItem(\"userToken\");\n      throw new Error(\"Token has expired\");\n    }\n\n    setAuthToken(localStorage.token);\n    const {\n      data\n    } = yield axios.get(\"/auth/user\");\n    yield put(fetchUserSuccess(data));\n    yield put(checkAuthTimeout());\n  } catch (error) {\n    yield put(fetchUserFail(error.message));\n  }\n}\n\nfunction* onRegister() {\n  yield takeLatest(userActionTypes.REGISTER_START, register);\n}\n\nexport default function* userSaga() {\n  yield all([call(onRegister)]);\n}","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/redux/user/user.saga.js"],"names":["put","takeLatest","call","all","delay","registerSuccess","registerFail","fetchUserSuccess","fetchUserStart","fetchUserFail","logout","userActionTypes","axios","urls","setAuthToken","checkAuthTimeout","userExpDate","console","log","register","payload","name","email","password","data","token","user","expDate","post","REGISTER_URL","localStorage","setItem","Date","now","error","message","fetchUser","Error","parse","removeItem","get","onRegister","REGISTER_START","userSaga"],"mappings":"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","sourcesContent":["import { put, takeLatest, call, all, delay } from \"redux-saga/effects\";\nimport {\n  registerSuccess,\n  registerFail,\n  fetchUserSuccess,\n  fetchUserStart,\n  fetchUserFail,\n  logout,\n} from \"./user.actions\";\nimport userActionTypes from \"./user.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nimport setAuthToken from \"../../utils/setAuthToken\";\n\nfunction* checkAuthTimeout(userExpDate) {\n  console.log(userExpDate);\n  yield delay(userExpDate * 1000);\n  yield put(logout());\n  yield call(setAuthToken, null);\n}\nfunction* register({ payload: { name, email, password } }) {\n  try {\n    const {\n      data: { token, user, expDate },\n    } = yield axios.post(urls.REGISTER_URL, { name, email, password });\n\n    localStorage.setItem(\"userToken\", token);\n    localStorage.setItem(\"userExpDate\", new Date(Date.now() + expDate * 1000));\n    setAuthToken(token);\n    yield put(registerSuccess(user));\n    yield put(checkAuthTimeout(0.2));\n  } catch (error) {\n    yield put(registerFail(error.message));\n  }\n}\n\nfunction* fetchUser() {\n  try {\n    if (!localStorage.token || !localStorage.expDate) {\n      throw new Error(\"Authentication denied\");\n    }\n    if (\n      !localStorage.expDate ||\n      Date.parse(localStorage.expDate) < Date.now()\n    ) {\n      localStorage.removeItem(\"userExpDate\");\n      localStorage.removeItem(\"userToken\");\n      throw new Error(\"Token has expired\");\n    }\n    setAuthToken(localStorage.token);\n    const { data } = yield axios.get(\"/auth/user\");\n    yield put(fetchUserSuccess(data));\n    yield put(checkAuthTimeout());\n  } catch (error) {\n    yield put(fetchUserFail(error.message));\n  }\n}\n\nfunction* onRegister() {\n  yield takeLatest(userActionTypes.REGISTER_START, register);\n}\n\nexport default function* userSaga() {\n  yield all([call(onRegister)]);\n}\n"]},"metadata":{},"sourceType":"module"}