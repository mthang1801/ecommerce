{"ast":null,"code":"import productTypeActionTypes from \"./product-type.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nimport { filter } from \"bluebird\";\nexport const fetchProductTypeStart = () => ({\n  type: productTypeActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_START\n});\nexport const fetchProductTypeSuccess = ({\n  name,\n  productGroupList,\n  manufactorList,\n  discountProductList,\n  topRatedProducts,\n  bestSellerProducts,\n  productList,\n  numProducts,\n  currentPage,\n  numPages,\n  maxPrice\n}) => ({\n  type: productTypeActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_SUCCESS,\n  payload: {\n    name,\n    productGroupList,\n    manufactorList,\n    discountProductList,\n    topRatedProducts,\n    bestSellerProducts,\n    productList,\n    numProducts,\n    currentPage,\n    numPages,\n    maxPrice\n  }\n});\nexport const fetchProductTypeFail = err => ({\n  type: productTypeActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_FAIL,\n  payload: {\n    msg: err.response.data.message,\n    status: err.response.status\n  }\n});\nexport const fetchProductType = (productTypeId, min_price, max_price, page = 1) => async dispatch => {\n  try {\n    dispatch(fetchProductTypeStart());\n    let {\n      data\n    } = await axios.get(urls.GET_CONTENT_LIST_BY_PRODUCT_TYPE_URL(productTypeId, min_price, max_price, page));\n    data.currentPage = page;\n    dispatch(fetchProductTypeSuccess(data));\n  } catch (error) {\n    dispatch(fetchProductTypeFail(error));\n  }\n};\nexport const setCurrentPage = curPage => ({\n  type: productTypeActionTypes.SET_CURRENT_PAGE,\n  payload: curPage\n});","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/redux/product-type/product-type.actions.js"],"names":["productTypeActionTypes","axios","urls","filter","fetchProductTypeStart","type","FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_START","fetchProductTypeSuccess","name","productGroupList","manufactorList","discountProductList","topRatedProducts","bestSellerProducts","productList","numProducts","currentPage","numPages","maxPrice","FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_SUCCESS","payload","fetchProductTypeFail","err","FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_FAIL","msg","response","data","message","status","fetchProductType","productTypeId","min_price","max_price","page","dispatch","get","GET_CONTENT_LIST_BY_PRODUCT_TYPE_URL","error","setCurrentPage","curPage","SET_CURRENT_PAGE"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,sBAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AAC1CC,EAAAA,IAAI,EAAEL,sBAAsB,CAACM;AADa,CAAP,CAA9B;AAGP,OAAO,MAAMC,uBAAuB,GAAG,CAAC;AACtCC,EAAAA,IADsC;AAEtCC,EAAAA,gBAFsC;AAGtCC,EAAAA,cAHsC;AAItCC,EAAAA,mBAJsC;AAKtCC,EAAAA,gBALsC;AAMtCC,EAAAA,kBANsC;AAOtCC,EAAAA,WAPsC;AAQtCC,EAAAA,WARsC;AAStCC,EAAAA,WATsC;AAUtCC,EAAAA,QAVsC;AAWtCC,EAAAA;AAXsC,CAAD,MAYhC;AACLb,EAAAA,IAAI,EAAEL,sBAAsB,CAACmB,0CADxB;AAELC,EAAAA,OAAO,EAAE;AACPZ,IAAAA,IADO;AAEPC,IAAAA,gBAFO;AAGPC,IAAAA,cAHO;AAIPC,IAAAA,mBAJO;AAKPC,IAAAA,gBALO;AAMPC,IAAAA,kBANO;AAOPC,IAAAA,WAPO;AAQPC,IAAAA,WARO;AASPC,IAAAA,WATO;AAUPC,IAAAA,QAVO;AAWPC,IAAAA;AAXO;AAFJ,CAZgC,CAAhC;AA4BP,OAAO,MAAMG,oBAAoB,GAAIC,GAAD,KAAU;AAC5CjB,EAAAA,IAAI,EAAEL,sBAAsB,CAACuB,uCADe;AAE5CH,EAAAA,OAAO,EAAE;AAAEI,IAAAA,GAAG,EAAEF,GAAG,CAACG,QAAJ,CAAaC,IAAb,CAAkBC,OAAzB;AAAkCC,IAAAA,MAAM,EAAEN,GAAG,CAACG,QAAJ,CAAaG;AAAvD;AAFmC,CAAV,CAA7B;AAKP,OAAO,MAAMC,gBAAgB,GAAG,CAC9BC,aAD8B,EAE9BC,SAF8B,EAG9BC,SAH8B,EAI9BC,IAAI,GAAG,CAJuB,KAK3B,MAAOC,QAAP,IAAoB;AACvB,MAAI;AACFA,IAAAA,QAAQ,CAAC9B,qBAAqB,EAAtB,CAAR;AACA,QAAI;AAAEsB,MAAAA;AAAF,QAAW,MAAMzB,KAAK,CAACkC,GAAN,CACnBjC,IAAI,CAACkC,oCAAL,CACEN,aADF,EAEEC,SAFF,EAGEC,SAHF,EAIEC,IAJF,CADmB,CAArB;AAQAP,IAAAA,IAAI,CAACV,WAAL,GAAmBiB,IAAnB;AACAC,IAAAA,QAAQ,CAAC3B,uBAAuB,CAACmB,IAAD,CAAxB,CAAR;AACD,GAZD,CAYE,OAAOW,KAAP,EAAc;AACdH,IAAAA,QAAQ,CAACb,oBAAoB,CAACgB,KAAD,CAArB,CAAR;AACD;AACF,CArBM;AAuBP,OAAO,MAAMC,cAAc,GAAIC,OAAD,KAAc;AAC1ClC,EAAAA,IAAI,EAAEL,sBAAsB,CAACwC,gBADa;AAE1CpB,EAAAA,OAAO,EAAEmB;AAFiC,CAAd,CAAvB","sourcesContent":["import productTypeActionTypes from \"./product-type.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nimport { filter } from \"bluebird\";\nexport const fetchProductTypeStart = () => ({\n  type: productTypeActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_START,\n});\nexport const fetchProductTypeSuccess = ({\n  name,\n  productGroupList,\n  manufactorList,\n  discountProductList,\n  topRatedProducts,\n  bestSellerProducts,\n  productList,\n  numProducts,\n  currentPage,\n  numPages,\n  maxPrice,\n}) => ({\n  type: productTypeActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_SUCCESS,\n  payload: {\n    name,\n    productGroupList,\n    manufactorList,\n    discountProductList,\n    topRatedProducts,\n    bestSellerProducts,\n    productList,\n    numProducts,\n    currentPage,\n    numPages,\n    maxPrice,\n  },\n});\nexport const fetchProductTypeFail = (err) => ({\n  type: productTypeActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_FAIL,\n  payload: { msg: err.response.data.message, status: err.response.status },\n});\n\nexport const fetchProductType = (\n  productTypeId,\n  min_price,\n  max_price,\n  page = 1\n) => async (dispatch) => {\n  try {\n    dispatch(fetchProductTypeStart());\n    let { data } = await axios.get(\n      urls.GET_CONTENT_LIST_BY_PRODUCT_TYPE_URL(\n        productTypeId,\n        min_price,\n        max_price,\n        page\n      )\n    );\n    data.currentPage = page;\n    dispatch(fetchProductTypeSuccess(data));\n  } catch (error) {\n    dispatch(fetchProductTypeFail(error));\n  }\n};\n\nexport const setCurrentPage = (curPage) => ({\n  type: productTypeActionTypes.SET_CURRENT_PAGE,\n  payload: curPage,\n});\n"]},"metadata":{},"sourceType":"module"}