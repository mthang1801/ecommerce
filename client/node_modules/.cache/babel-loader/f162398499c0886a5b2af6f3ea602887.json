{"ast":null,"code":"export const setLikeForComment = (comments, commentId, userId) => {\n  return comments.map(comment => {\n    if (comment._id == commentId) {\n      comment.likes.push(userId);\n      comment.dislikes = comment.dislikes.filter(_id => _id != userId);\n    }\n\n    return comment;\n  });\n};\nexport const setUnlikeForComment = (comments, commentId, userId) => {\n  return comments.map(comment => {\n    if (comment._id == commentId) {\n      comment.likes = comment.likes.filter(_id => _id != userId);\n    }\n\n    return comment;\n  });\n};\nexport const setDislikeForComment = (comments, commentId, userId) => {\n  return comments.map(comment => {\n    if (comment._id == commentId) {\n      comment.dislikes.push(userId);\n      comment.likes = comment.likes.filter(_id => _id != userId);\n    }\n\n    return comment;\n  });\n};\nexport const setUndislikeForComment = (comments, commentId, userId) => {\n  return comments.map(comment => {\n    if (comment._id == commentId) {\n      comment.dislikes = comment.dislikes.filter(_id => _id != userId);\n    }\n\n    return comment;\n  });\n};\nexport const setResponseComment = (comments, commentId, response) => {\n  return comments.map(comment => {\n    if (comment._id == commentId) {\n      comment.responses.push(response);\n    }\n\n    return comment;\n  });\n};\nexport const setLikeForResponseComment = (comments, commentId, responseId, userId) => {\n  return comments.map(comment => {\n    if (commentId == comment._id) {\n      let responses = comment.responses.map(response => {\n        if (response._id == responseId) {\n          response.likes.push(userId);\n          response.dislikes = response.dislikes.filter(_id => _id != userId);\n        }\n\n        return response;\n      });\n      comment.responses = [...responses];\n    }\n\n    return comment;\n  });\n};\nexport const setUnlikeForResponseComment = (comments, commentId, responseId, userId) => {\n  return comments.map(comment => {\n    if (commentId == comment._id) {\n      let responses = comment.responses.map(response => {\n        if (response._id == responseId) {\n          response.likes = response.likes.filter(_id => _id != userId);\n        }\n\n        return response;\n      });\n      comment.responses = responses;\n    }\n\n    return comment;\n  });\n};","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/redux/product-comment-review/product-comment-review.utils.js"],"names":["setLikeForComment","comments","commentId","userId","map","comment","_id","likes","push","dislikes","filter","setUnlikeForComment","setDislikeForComment","setUndislikeForComment","setResponseComment","response","responses","setLikeForResponseComment","responseId","setUnlikeForResponseComment"],"mappings":"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","sourcesContent":["export const setLikeForComment = (comments, commentId, userId) => {\n  return comments.map((comment) => {\n    if (comment._id == commentId) {\n      comment.likes.push(userId);\n      comment.dislikes = comment.dislikes.filter((_id) => _id != userId);\n    }\n    return comment;\n  });\n};\n\nexport const setUnlikeForComment = (comments, commentId, userId) => {\n  return comments.map((comment) => {\n    if (comment._id == commentId) {\n      comment.likes = comment.likes.filter((_id) => _id != userId);\n    }\n    return comment;\n  });\n};\nexport const setDislikeForComment = (comments, commentId, userId) => {\n  return comments.map((comment) => {\n    if (comment._id == commentId) {\n      comment.dislikes.push(userId);\n      comment.likes = comment.likes.filter((_id) => _id != userId);\n    }\n    return comment;\n  });\n};\n\nexport const setUndislikeForComment = (comments, commentId, userId) => {\n  return comments.map((comment) => {\n    if (comment._id == commentId) {\n      comment.dislikes = comment.dislikes.filter((_id) => _id != userId);\n    }\n    return comment;\n  });\n};\n\nexport const setResponseComment = (comments, commentId, response) => {\n  return comments.map((comment) => {\n    if (comment._id == commentId) {\n      comment.responses.push(response);\n    }\n    return comment;\n  });\n};\nexport const setLikeForResponseComment = (\n  comments,\n  commentId,\n  responseId,\n  userId\n) => {\n  return comments.map((comment) => {\n    if (commentId == comment._id) {\n      let responses = comment.responses.map((response) => {\n        if (response._id == responseId) {\n          response.likes.push(userId);\n          response.dislikes = response.dislikes.filter((_id) => _id != userId);\n        }\n        return response;\n      });\n      comment.responses = [...responses];\n    }\n    return comment;\n  });\n};\nexport const setUnlikeForResponseComment = (\n  comments,\n  commentId,\n  responseId,\n  userId\n) => {\n  return comments.map((comment) => {\n    if (commentId == comment._id) {\n      let responses = comment.responses.map((response) => {\n        if (response._id == responseId) {\n          response.likes = response.likes.filter((_id) => _id != userId);\n        }\n        return response;\n      });\n      comment.responses = responses;\n    }\n    return comment;\n  });\n};\n"]},"metadata":{},"sourceType":"module"}