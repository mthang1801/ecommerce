{"ast":null,"code":"import CATEGORIES_DATA from \"../data/category\";\nimport PRODUCTS_DATA from \"../data/products\";\nimport SELLERS_DATA from \"../data/sellers\";\nimport CART_DATA from \"../data/cart\";\nimport axios from \"axios\";\nimport urls from \"./urls\"; //========================================\n\nexport const getListCities = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        data\n      } = await axios.get(urls.LIST_CITIES_API);\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const getListDistricts = cityID => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        data\n      } = await axios.get(urls.LIST_DISTRICTS_BASE_ON_CITY_ID_API(cityID));\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const getListWards = districtID => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        data\n      } = await axios.get(urls.LIST_WARDS_BASE_ON_DISRICT_ID_API(districtID));\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const getListCategory = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        data\n      } = await axios.get(urls.GET_LIST_CATEGORY);\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const getListProductType = categoryID => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        data\n      } = await axios.get(urls.GET_LIST_PRODUCT_TYPE_BY_CATEGORYID(categoryID));\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const getListProductGroup = productTypeID => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        data\n      } = await axios.get(urls.GET_LIST_PRODUCT_GROUP_BY_PRODUCTTYPEID(productTypeID));\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const registerAsSeller = registerForm => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        data\n      } = await axios.put(urls.UPDATE_ROLE_USER_AS_SELLER, registerForm);\n      resolve(true);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const createNewProduct = product => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let formData = new FormData();\n      formData.append(\"categoryId\", product.selectedCategory._id);\n      formData.append(\"productTypeId\", product.selectedProductType._id);\n      formData.append(\"rootUrl\", product.selectedProductType.linkUrl);\n      formData.append(\"productGroupId\", product.selectedProductGroup._id === \"#\" ? \"\" : product.selectedProductGroup._id);\n      formData.append(\"groupName\", product.selectedProductGroup.name);\n      formData.append(\"label\", product.label);\n      formData.append(\"name\", product.name);\n      formData.append(\"price\", product.price);\n      formData.append(\"discount\", product.discount || 0);\n      formData.append(\"discountExpDate\", product.discountExpDate);\n      formData.append(\"description\", product.description);\n      formData.append(\"information\", product.information);\n      formData.append(\"manufactor\", product.manufactor);\n      formData.append(\"weight\", +product.weight);\n      formData.append(\"quantity\", +product.quantity);\n      formData.append(\"ship_fee\", +product.ship_fee);\n\n      for (let file of product.image) {\n        formData.append(\"multiple-images\", file);\n      }\n\n      const {\n        data\n      } = await axios.post(urls.POST_CREATE_NEW_PRODUCT, formData);\n      resolve(true);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const getLatestProducts = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        data\n      } = await axios.get(urls.GET_LATEST_PRODUCTS);\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const getBestSellerProducts = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        data\n      } = await axios.get(urls.GET_BEST_SELLER_PRODUCTS);\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const getTopRatedProducts = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        data\n      } = await axios.get(urls.GET_TOP_RATED_PRODUCTS);\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const getCategoryList = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        data\n      } = await axios.get(urls.GET_CATEGORY_LIST);\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const getProductListByPageNumber = page => {\n  return new Promise(async (resolve, reject) => {\n    try {} catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const postCODPayment = (currentUser, cartItems, methodDelivery, userMessage, totalPrice) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      console.log(methodDelivery);\n      const {\n        data\n      } = await axios.post(urls.POST_COD_PAYMENT, {\n        currentUser,\n        cartItems,\n        methodDelivery,\n        userMessage,\n        totalPrice\n      });\n      resolve(data);\n    } catch (error) {\n      reject(error.response.data.message);\n    }\n  });\n};\nexport const postCardPayment = (currentUser, cartItems, methodDelivery, userMessage, totalPrice, token) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        data\n      } = await axios.post(urls.POST_CARD_PAYMENT, {\n        currentUser,\n        cartItems,\n        methodDelivery,\n        userMessage,\n        totalPrice,\n        token\n      });\n      resolve(data);\n    } catch (error) {\n      reject(error.response.data.message);\n    }\n  });\n};\nexport const postReviewsProduct = (productId, stars, comment) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        data\n      } = await axios.post(urls.POST_REVIEWS_PRODUCT(productId), {\n        stars,\n        comment\n      });\n      resolve(true);\n    } catch (error) {\n      reject(error.response.data.message);\n    }\n  });\n};\nexport const updateReviewsProduct = (productId, stars, comment, updatedMyReview) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        data\n      } = await axios.put(urls.UPDATE_REVIEWS_PRODUCT(productId), {\n        stars,\n        comment,\n        updatedMyReview: { ...updatedMyReview\n        }\n      });\n      resolve(data);\n    } catch (error) {\n      reject(error.response.data.message);\n    }\n  });\n};\nexport const getCommentReviewsByProductId = productId => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        data\n      } = await axios.get(urls.GET_PRODUCT_COMMENT_REVIEWS(productId));\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/utils/connectDB.js"],"names":["CATEGORIES_DATA","PRODUCTS_DATA","SELLERS_DATA","CART_DATA","axios","urls","getListCities","Promise","resolve","reject","data","get","LIST_CITIES_API","error","getListDistricts","cityID","LIST_DISTRICTS_BASE_ON_CITY_ID_API","getListWards","districtID","LIST_WARDS_BASE_ON_DISRICT_ID_API","getListCategory","GET_LIST_CATEGORY","getListProductType","categoryID","GET_LIST_PRODUCT_TYPE_BY_CATEGORYID","getListProductGroup","productTypeID","GET_LIST_PRODUCT_GROUP_BY_PRODUCTTYPEID","registerAsSeller","registerForm","put","UPDATE_ROLE_USER_AS_SELLER","createNewProduct","product","formData","FormData","append","selectedCategory","_id","selectedProductType","linkUrl","selectedProductGroup","name","label","price","discount","discountExpDate","description","information","manufactor","weight","quantity","ship_fee","file","image","post","POST_CREATE_NEW_PRODUCT","getLatestProducts","GET_LATEST_PRODUCTS","getBestSellerProducts","GET_BEST_SELLER_PRODUCTS","getTopRatedProducts","GET_TOP_RATED_PRODUCTS","getCategoryList","GET_CATEGORY_LIST","getProductListByPageNumber","page","postCODPayment","currentUser","cartItems","methodDelivery","userMessage","totalPrice","console","log","POST_COD_PAYMENT","response","message","postCardPayment","token","POST_CARD_PAYMENT","postReviewsProduct","productId","stars","comment","POST_REVIEWS_PRODUCT","updateReviewsProduct","updatedMyReview","UPDATE_REVIEWS_PRODUCT","getCommentReviewsByProductId","GET_PRODUCT_COMMENT_REVIEWS"],"mappings":"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","sourcesContent":["import CATEGORIES_DATA from \"../data/category\";\nimport PRODUCTS_DATA from \"../data/products\";\nimport SELLERS_DATA from \"../data/sellers\";\nimport CART_DATA from \"../data/cart\";\nimport axios from \"axios\";\nimport urls from \"./urls\";\n\n//========================================\n\nexport const getListCities = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await axios.get(urls.LIST_CITIES_API);\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const getListDistricts = (cityID) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await axios.get(\n        urls.LIST_DISTRICTS_BASE_ON_CITY_ID_API(cityID)\n      );\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const getListWards = (districtID) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await axios.get(\n        urls.LIST_WARDS_BASE_ON_DISRICT_ID_API(districtID)\n      );\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const getListCategory = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await axios.get(urls.GET_LIST_CATEGORY);\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const getListProductType = (categoryID) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await axios.get(\n        urls.GET_LIST_PRODUCT_TYPE_BY_CATEGORYID(categoryID)\n      );\n\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport const getListProductGroup = (productTypeID) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await axios.get(\n        urls.GET_LIST_PRODUCT_GROUP_BY_PRODUCTTYPEID(productTypeID)\n      );\n\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const registerAsSeller = (registerForm) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await axios.put(\n        urls.UPDATE_ROLE_USER_AS_SELLER,\n        registerForm\n      );\n      resolve(true);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const createNewProduct = (product) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      let formData = new FormData();\n      formData.append(\"categoryId\", product.selectedCategory._id);\n      formData.append(\"productTypeId\", product.selectedProductType._id);\n      formData.append(\"rootUrl\", product.selectedProductType.linkUrl);\n      formData.append(\n        \"productGroupId\",\n        product.selectedProductGroup._id === \"#\"\n          ? \"\"\n          : product.selectedProductGroup._id\n      );\n      formData.append(\"groupName\", product.selectedProductGroup.name);\n      formData.append(\"label\", product.label);\n      formData.append(\"name\", product.name);\n      formData.append(\"price\", product.price);\n      formData.append(\"discount\", product.discount || 0);\n      formData.append(\"discountExpDate\", product.discountExpDate);\n      formData.append(\"description\", product.description);\n      formData.append(\"information\", product.information);\n      formData.append(\"manufactor\", product.manufactor);\n      formData.append(\"weight\", +product.weight);\n      formData.append(\"quantity\", +product.quantity);\n      formData.append(\"ship_fee\", +product.ship_fee);\n      for (let file of product.image) {\n        formData.append(\"multiple-images\", file);\n      }\n\n      const { data } = await axios.post(urls.POST_CREATE_NEW_PRODUCT, formData);\n      resolve(true);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const getLatestProducts = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await axios.get(urls.GET_LATEST_PRODUCTS);\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const getBestSellerProducts = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await axios.get(urls.GET_BEST_SELLER_PRODUCTS);\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const getTopRatedProducts = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await axios.get(urls.GET_TOP_RATED_PRODUCTS);\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const getCategoryList = () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await axios.get(urls.GET_CATEGORY_LIST);\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const getProductListByPageNumber = (page) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n\nexport const postCODPayment = (\n  currentUser,\n  cartItems,\n  methodDelivery,\n  userMessage,\n  totalPrice\n) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      console.log(methodDelivery);\n      const { data } = await axios.post(urls.POST_COD_PAYMENT, {\n        currentUser,\n        cartItems,\n        methodDelivery,\n        userMessage,\n        totalPrice,\n      });\n      resolve(data);\n    } catch (error) {\n      reject(error.response.data.message);\n    }\n  });\n};\n\nexport const postCardPayment = (\n  currentUser,\n  cartItems,\n  methodDelivery,\n  userMessage,\n  totalPrice,\n  token\n) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await axios.post(urls.POST_CARD_PAYMENT, {\n        currentUser,\n        cartItems,\n        methodDelivery,\n        userMessage,\n        totalPrice,\n        token,\n      });\n      resolve(data);\n    } catch (error) {\n      reject(error.response.data.message);\n    }\n  });\n};\nexport const postReviewsProduct = (productId, stars, comment) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await axios.post(urls.POST_REVIEWS_PRODUCT(productId), {\n        stars,\n        comment,\n      });\n      resolve(true);\n    } catch (error) {\n      reject(error.response.data.message);\n    }\n  });\n};\nexport const updateReviewsProduct = (\n  productId,\n  stars,\n  comment,\n  updatedMyReview\n) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await axios.put(urls.UPDATE_REVIEWS_PRODUCT(productId), {\n        stars,\n        comment,\n        updatedMyReview: { ...updatedMyReview },\n      });\n      resolve(data);\n    } catch (error) {\n      reject(error.response.data.message);\n    }\n  });\n};\nexport const getCommentReviewsByProductId = (productId) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await axios.get(\n        urls.GET_PRODUCT_COMMENT_REVIEWS(productId)\n      );\n      resolve(data);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}