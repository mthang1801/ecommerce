{"ast":null,"code":"import userActionTypes from \"./user.types\";\nimport axios from \"axios\"; // export const fetchUserStart = () => ({\n//   type: userActionTypes.FETCH_USER_START,\n// });\n// export const fetchUserSuccess = (user) => ({\n//   type: userActionTypes.FETCH_USER_SUCCESS,\n//   payload: user,\n// });\n// export const fetchUserFail = () => ({\n//   type: userActionTypes.FETCH_USER_FAIL,\n// });\n// export const fetchUser = () => async (dispatch) => {\n//   try {\n//     dispatch(fetchUserStart());\n//     if (!localStorage.token || !localStorage.expDate) {\n//       throw new Error(\"Authentication denied\");\n//     }\n//     if (\n//       !localStorage.expDate ||\n//       Date.parse(localStorage.expDate) < Date.now()\n//     ) {\n//       localStorage.removeItem(\"expDate\");\n//       localStorage.removeItem(\"token\");\n//       throw new Error(\"Token has expired\");\n//     }\n//     setAuthToken(localStorage.token);\n//     console.log(axios.defaults.headers);\n//     const { data } = await axios.get(\"/auth/staff\");\n//     dispatch(fetchUserSuccess(data));\n//   } catch (error) {\n//     dispatch(fetchUserFail());\n//   }\n// };\n\nexport const registerStart = (name, email, password) => ({\n  type: userActionTypes.REGISTER_START,\n  payload: {\n    name,\n    email,\n    password\n  }\n});\nexport const registerSuccess = user => ({\n  type: userActionTypes.REGISTER_SUCCESS,\n  payload: user\n});\nexport const registerFail = err => ({\n  type: userActionTypes.REGISTER_FAIL,\n  payload: err\n}); // export const register = (formData) => (dispatch) => {\n//   return new Promise(async (resolve, reject) => {\n//     try {\n//       console.log(formData);\n//       dispatch(registerStart());\n//       const {\n//         data: { token, user },\n//       } = await axios.post(\"/staff/register\", formData);\n//       localStorage.setItem(\"token\", token);\n//       localStorage.setItem(\"expDate\", new Date(Date.now() + 60 * 60 * 1000));\n//       dispatch(registerSuccess(user));\n//       resolve(true);\n//     } catch (error) {\n//       dispatch(registerFail(error.message));\n//       reject(error);\n//     }\n//   });\n// };\n// export const logout = () => (dispatch) => {\n//   localStorage.removeItem(\"token\");\n//   localStorage.removeItem(\"expDate\");\n//   setAuthToken(null);\n//   dispatch({\n//     type: userActionTypes.LOGOUT,\n//   });\n// };\n// export const loginStart = () => ({\n//   type: userActionTypes.LOGIN_START,\n// });\n// export const loginSuccess = (user) => ({\n//   type: userActionTypes.LOGIN_SUCCESS,\n//   payload: user,\n// });\n// export const loginFail = (err) => ({\n//   type: userActionTypes.LOGIN_FAIL,\n//   payload: err,\n// });\n// export const login = (email, password) => async (dispatch) => {\n//   try {\n//     dispatch(loginStart());\n//     console.log(email, password);\n//     const {\n//       data: { user, token },\n//     } = await axios.post(\"/auth/staff\", { email, password });\n//     localStorage.setItem(\"token\", token);\n//     localStorage.setItem(\"expDate\", new Date(Date.now() + 60 * 60 * 1000));\n//     dispatch(loginSuccess(user));\n//   } catch (error) {\n//     dispatch(loginFail(error));\n//   }\n// };","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/redux/user/user.actions.js"],"names":["userActionTypes","axios","registerStart","name","email","password","type","REGISTER_START","payload","registerSuccess","user","REGISTER_SUCCESS","registerFail","err","REGISTER_FAIL"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,MAA4B;AACvDC,EAAAA,IAAI,EAAEN,eAAe,CAACO,cADiC;AAEvDC,EAAAA,OAAO,EAAE;AAAEL,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf;AAF8C,CAA5B,CAAtB;AAKP,OAAO,MAAMI,eAAe,GAAIC,IAAD,KAAW;AACxCJ,EAAAA,IAAI,EAAEN,eAAe,CAACW,gBADkB;AAExCH,EAAAA,OAAO,EAAEE;AAF+B,CAAX,CAAxB;AAKP,OAAO,MAAME,YAAY,GAAIC,GAAD,KAAU;AACpCP,EAAAA,IAAI,EAAEN,eAAe,CAACc,aADc;AAEpCN,EAAAA,OAAO,EAAEK;AAF2B,CAAV,CAArB,C,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import userActionTypes from \"./user.types\";\nimport axios from \"axios\";\n// export const fetchUserStart = () => ({\n//   type: userActionTypes.FETCH_USER_START,\n// });\n// export const fetchUserSuccess = (user) => ({\n//   type: userActionTypes.FETCH_USER_SUCCESS,\n//   payload: user,\n// });\n// export const fetchUserFail = () => ({\n//   type: userActionTypes.FETCH_USER_FAIL,\n// });\n\n// export const fetchUser = () => async (dispatch) => {\n//   try {\n//     dispatch(fetchUserStart());\n//     if (!localStorage.token || !localStorage.expDate) {\n//       throw new Error(\"Authentication denied\");\n//     }\n\n//     if (\n//       !localStorage.expDate ||\n//       Date.parse(localStorage.expDate) < Date.now()\n//     ) {\n//       localStorage.removeItem(\"expDate\");\n//       localStorage.removeItem(\"token\");\n//       throw new Error(\"Token has expired\");\n//     }\n//     setAuthToken(localStorage.token);\n//     console.log(axios.defaults.headers);\n//     const { data } = await axios.get(\"/auth/staff\");\n//     dispatch(fetchUserSuccess(data));\n//   } catch (error) {\n//     dispatch(fetchUserFail());\n//   }\n// };\n\nexport const registerStart = (name, email, password) => ({\n  type: userActionTypes.REGISTER_START,\n  payload: { name, email, password },\n});\n\nexport const registerSuccess = (user) => ({\n  type: userActionTypes.REGISTER_SUCCESS,\n  payload: user,\n});\n\nexport const registerFail = (err) => ({\n  type: userActionTypes.REGISTER_FAIL,\n  payload: err,\n});\n\n// export const register = (formData) => (dispatch) => {\n//   return new Promise(async (resolve, reject) => {\n//     try {\n//       console.log(formData);\n//       dispatch(registerStart());\n//       const {\n//         data: { token, user },\n//       } = await axios.post(\"/staff/register\", formData);\n//       localStorage.setItem(\"token\", token);\n//       localStorage.setItem(\"expDate\", new Date(Date.now() + 60 * 60 * 1000));\n//       dispatch(registerSuccess(user));\n//       resolve(true);\n//     } catch (error) {\n//       dispatch(registerFail(error.message));\n//       reject(error);\n//     }\n//   });\n// };\n\n// export const logout = () => (dispatch) => {\n//   localStorage.removeItem(\"token\");\n//   localStorage.removeItem(\"expDate\");\n//   setAuthToken(null);\n//   dispatch({\n//     type: userActionTypes.LOGOUT,\n//   });\n// };\n\n// export const loginStart = () => ({\n//   type: userActionTypes.LOGIN_START,\n// });\n\n// export const loginSuccess = (user) => ({\n//   type: userActionTypes.LOGIN_SUCCESS,\n//   payload: user,\n// });\n\n// export const loginFail = (err) => ({\n//   type: userActionTypes.LOGIN_FAIL,\n//   payload: err,\n// });\n\n// export const login = (email, password) => async (dispatch) => {\n//   try {\n//     dispatch(loginStart());\n//     console.log(email, password);\n//     const {\n//       data: { user, token },\n//     } = await axios.post(\"/auth/staff\", { email, password });\n//     localStorage.setItem(\"token\", token);\n//     localStorage.setItem(\"expDate\", new Date(Date.now() + 60 * 60 * 1000));\n//     dispatch(loginSuccess(user));\n//   } catch (error) {\n//     dispatch(loginFail(error));\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}