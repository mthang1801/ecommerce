{"ast":null,"code":"import productGroupActionTypes from \"./product-group.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nexport const fetchProductGroupStart = () => ({\n  type: productGroupActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_START\n});\nexport const fetchProductGroupSuccess = ({\n  name,\n  discountProductList,\n  topRatedProducts,\n  bestSellerProducts,\n  productList,\n  numProducts,\n  currentPage,\n  numPages,\n  maxPrice\n}) => ({\n  type: productGroupActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_SUCCESS,\n  payload: {\n    name,\n    discountProductList,\n    topRatedProducts,\n    bestSellerProducts,\n    productList,\n    numProducts,\n    currentPage,\n    numPages,\n    maxPrice\n  }\n});\nexport const fetchProductGroupFail = err => ({\n  type: productGroupActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_FAIL,\n  payload: {\n    msg: err.response.data.message,\n    status: err.response.status\n  }\n});\nexport const fetchProductGroup = (categoryUrl, productTypeUrl, productGroupUrl, page) => async dispatch => {\n  try {\n    dispatch(fetchProductGroupStart());\n    console.log(productGroupUrl);\n    let {\n      data\n    } = await axios.get(urls.GET_CONTENT_LIST_BY_PRODUCT_GROUP_PATH_URL(categoryUrl, productTypeUrl, productGroupUrl, page));\n    data.currentPage = page;\n    dispatch(fetchProductGroupSuccess(data));\n  } catch (error) {\n    dispatch(fetchProductGroupFail(error));\n  }\n};\nexport const setCurrentPage = curPage => ({\n  type: productGroupActionTypes.SET_CURRENT_PAGE,\n  payload: curPage\n});\nexport const fetchProductListStart = () => ({\n  type: productGroupActionTypes.FETCH_PRODUCT_LIST_START\n});\nexport const fetchProductListSuccess = productList => ({\n  type: productGroupActionTypes.FETCH_PRODUCT_LIST_SUCCESS,\n  payload: productList\n});\nexport const fetchProductListFail = err => ({\n  type: productGroupActionTypes.FETCH_PRODUCT_LIST_FAIL,\n  payload: {\n    msg: err.response.data.message,\n    status: err.response.status\n  }\n});\nexport const fetchProductList = (categoryUrl, productTypeUrl, page) => async (dispatch) => {\n  try {\n    console.log(page);\n    dispatch(fetchProductListStart());\n    const {\n      data\n    } = await axios.get(urls.GET_PRODUCT_LIST_PER_PAGE_BY_PRODUCT_TYPE_PATH_URL(categoryUrl, productTypeUrl, page));\n    dispatch(fetchProductListSuccess(data));\n  } catch (error) {\n    dispatch(fetchProductListFail(error));\n  }\n};","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/redux/product-group/product-group.actions.js"],"names":["productGroupActionTypes","axios","urls","fetchProductGroupStart","type","FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_START","fetchProductGroupSuccess","name","discountProductList","topRatedProducts","bestSellerProducts","productList","numProducts","currentPage","numPages","maxPrice","FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_SUCCESS","payload","fetchProductGroupFail","err","FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_FAIL","msg","response","data","message","status","fetchProductGroup","categoryUrl","productTypeUrl","productGroupUrl","page","dispatch","console","log","get","GET_CONTENT_LIST_BY_PRODUCT_GROUP_PATH_URL","error","setCurrentPage","curPage","SET_CURRENT_PAGE","fetchProductListStart","FETCH_PRODUCT_LIST_START","fetchProductListSuccess","FETCH_PRODUCT_LIST_SUCCESS","fetchProductListFail","FETCH_PRODUCT_LIST_FAIL","fetchProductList","GET_PRODUCT_LIST_PER_PAGE_BY_PRODUCT_TYPE_PATH_URL"],"mappings":"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","sourcesContent":["import productGroupActionTypes from \"./product-group.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nexport const fetchProductGroupStart = () => ({\n  type: productGroupActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_START,\n});\nexport const fetchProductGroupSuccess = ({\n  name,\n  discountProductList,\n  topRatedProducts,\n  bestSellerProducts,\n  productList,\n  numProducts,\n  currentPage,\n  numPages,\n  maxPrice,\n}) => ({\n  type: productGroupActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_SUCCESS,\n  payload: {\n    name,\n    discountProductList,\n    topRatedProducts,\n    bestSellerProducts,\n    productList,\n    numProducts,\n    currentPage,\n    numPages,\n    maxPrice,\n  },\n});\nexport const fetchProductGroupFail = (err) => ({\n  type: productGroupActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_FAIL,\n  payload: { msg: err.response.data.message, status: err.response.status },\n});\n\nexport const fetchProductGroup = (\n  categoryUrl,\n  productTypeUrl,\n  productGroupUrl,\n  page\n) => async (dispatch) => {\n  try {\n    dispatch(fetchProductGroupStart());\n    console.log(productGroupUrl);\n    let { data } = await axios.get(\n      urls.GET_CONTENT_LIST_BY_PRODUCT_GROUP_PATH_URL(\n        categoryUrl,\n        productTypeUrl,\n        productGroupUrl,\n        page\n      )\n    );\n    data.currentPage = page;\n    dispatch(fetchProductGroupSuccess(data));\n  } catch (error) {\n    dispatch(fetchProductGroupFail(error));\n  }\n};\n\nexport const setCurrentPage = (curPage) => ({\n  type: productGroupActionTypes.SET_CURRENT_PAGE,\n  payload: curPage,\n});\n\nexport const fetchProductListStart = () => ({\n  type: productGroupActionTypes.FETCH_PRODUCT_LIST_START,\n});\nexport const fetchProductListSuccess = (productList) => ({\n  type: productGroupActionTypes.FETCH_PRODUCT_LIST_SUCCESS,\n  payload: productList,\n});\nexport const fetchProductListFail = (err) => ({\n  type: productGroupActionTypes.FETCH_PRODUCT_LIST_FAIL,\n  payload: { msg: err.response.data.message, status: err.response.status },\n});\n\nexport const fetchProductList = (categoryUrl, productTypeUrl, page) => async (\n  dispatch\n) => {\n  try {\n    console.log(page);\n    dispatch(fetchProductListStart());\n    const { data } = await axios.get(\n      urls.GET_PRODUCT_LIST_PER_PAGE_BY_PRODUCT_TYPE_PATH_URL(\n        categoryUrl,\n        productTypeUrl,\n        page\n      )\n    );\n    dispatch(fetchProductListSuccess(data));\n  } catch (error) {\n    dispatch(fetchProductListFail(error));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}