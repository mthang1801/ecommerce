{"ast":null,"code":"import categoryActionTypes from \"./category.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nexport const fetchCategoryStart = () => {\n  return {\n    type: categoryActionTypes.FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_START\n  };\n};\nexport const fetchCategorySuccess = ({\n  categoryList,\n  productTypeList,\n  discountProductList,\n  topRatedProducts,\n  bestSellerProducts,\n  productList,\n  numProducts,\n  numPages,\n  currentPage,\n  maxPrice\n}) => ({\n  type: categoryActionTypes.FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_SUCCESS,\n  payload: {\n    categoryList,\n    productTypeList,\n    discountProductList,\n    topRatedProducts,\n    bestSellerProducts,\n    productList,\n    numProducts,\n    numPages,\n    currentPage,\n    maxPrice\n  }\n});\nexport const fetchCategoryFail = err => {\n  return {\n    type: categoryActionTypes.FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_FAIL,\n    payload: {\n      msg: err.response.data.message,\n      status: err.response.status\n    }\n  };\n};\nexport const fetchCategory = (categoryId, min_price, max_price, page = 1) => async dispatch => {\n  try {\n    console.log(min_price, max_price);\n    dispatch(fetchCategoryStart());\n    let {\n      data\n    } = await axios.get(urls.GET_CONTENT_LIST_BY_CATEGORY_PATH_URL(categoryId, +min_price, +max_price, page));\n    data.currentPage = page;\n    dispatch(fetchCategorySuccess(data));\n  } catch (error) {\n    dispatch(fetchCategoryFail(error));\n  }\n};\nexport const setCurrentPage = curPage => ({\n  type: categoryActionTypes.SET_CURRENT_PAGE,\n  payload: curPage\n});\nexport const fetchProductListStart = () => ({\n  type: categoryActionTypes.FETCH_PRODUCT_LIST_START\n});\nexport const fetchProductListSuccess = productList => ({\n  type: categoryActionTypes.FETCH_PRODUCT_LIST_SUCCESS,\n  payload: productList\n});\nexport const fetchProductListFail = err => ({\n  type: categoryActionTypes.FETCH_PRODUCT_LIST_FAIL,\n  payload: {\n    msg: err.response.data.message,\n    status: err.response.status\n  }\n});\nexport const fetchProductList = (categoryId, page) => async dispatch => {\n  try {\n    dispatch(fetchProductListStart());\n    const {\n      data\n    } = await axios.get(urls.GET_PRODUCT_LIST_PER_PAGE_BY_CATEGORY_PATH_URL(categoryId, page));\n    dispatch(fetchProductListSuccess(data));\n  } catch (error) {\n    dispatch(fetchCategoryFail(error));\n  }\n};\n\nconst filterProductsByPriceStart = () => ({\n  type: categoryActionTypes.FILTER_PRODUCTS_BY_PRICE_START\n});\n\nconst filterProductsByPriceSuccess = (categoryList, productList, numProducts, currentPage, numPages, maxPrice) => ({\n  type: categoryActionTypes.FILTER_PRODUCTS_BY_PRICE_SUCCESS,\n  payload: {\n    categoryList,\n    productList,\n    numProducts,\n    currentPage,\n    numPages,\n    maxPrice\n  }\n});\n\nconst filterProductsByPriceFail = err => ({\n  type: categoryActionTypes.FILTER_PRODUCTS_BY_PRICE_FAIL,\n  payload: {\n    msg: err.response.data.message,\n    status: err.response.status\n  }\n});\n\nexport const filterProductsByPrice = (categoryPath, minPriceChange, maxPriceChange, page = 1) => async dispatch => {\n  try {\n    dispatch(filterProductsByPriceStart());\n    const {\n      data: {\n        categoryList,\n        productList,\n        numProducts,\n        currentPage,\n        numPages,\n        maxPrice\n      }\n    } = await axios.get(urls.GET_PRODUCT_LIST_BY_FILTER_PRICE_IN_CATEGORY(categoryPath, minPriceChange, maxPriceChange, page));\n    dispatch(filterProductsByPriceSuccess(categoryList, productList, numProducts, currentPage, numPages, maxPrice));\n  } catch (error) {\n    dispatch(filterProductsByPriceFail(error));\n  }\n};","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/redux/category/category.actions.js"],"names":["categoryActionTypes","axios","urls","fetchCategoryStart","type","FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_START","fetchCategorySuccess","categoryList","productTypeList","discountProductList","topRatedProducts","bestSellerProducts","productList","numProducts","numPages","currentPage","maxPrice","FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_SUCCESS","payload","fetchCategoryFail","err","FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_FAIL","msg","response","data","message","status","fetchCategory","categoryId","min_price","max_price","page","dispatch","console","log","get","GET_CONTENT_LIST_BY_CATEGORY_PATH_URL","error","setCurrentPage","curPage","SET_CURRENT_PAGE","fetchProductListStart","FETCH_PRODUCT_LIST_START","fetchProductListSuccess","FETCH_PRODUCT_LIST_SUCCESS","fetchProductListFail","FETCH_PRODUCT_LIST_FAIL","fetchProductList","GET_PRODUCT_LIST_PER_PAGE_BY_CATEGORY_PATH_URL","filterProductsByPriceStart","FILTER_PRODUCTS_BY_PRICE_START","filterProductsByPriceSuccess","FILTER_PRODUCTS_BY_PRICE_SUCCESS","filterProductsByPriceFail","FILTER_PRODUCTS_BY_PRICE_FAIL","filterProductsByPrice","categoryPath","minPriceChange","maxPriceChange","GET_PRODUCT_LIST_BY_FILTER_PRICE_IN_CATEGORY"],"mappings":"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","sourcesContent":["import categoryActionTypes from \"./category.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nexport const fetchCategoryStart = () => {\n  return {\n    type: categoryActionTypes.FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_START,\n  };\n};\nexport const fetchCategorySuccess = ({\n  categoryList,\n  productTypeList,\n  discountProductList,\n  topRatedProducts,\n  bestSellerProducts,\n  productList,\n  numProducts,\n  numPages,\n  currentPage,\n  maxPrice,\n}) => ({\n  type: categoryActionTypes.FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_SUCCESS,\n  payload: {\n    categoryList,\n    productTypeList,\n    discountProductList,\n    topRatedProducts,\n    bestSellerProducts,\n    productList,\n    numProducts,\n    numPages,\n    currentPage,\n    maxPrice,\n  },\n});\nexport const fetchCategoryFail = (err) => {\n  return {\n    type: categoryActionTypes.FETCH_CONTENT_LIST_BY_CATEGORY_PATH_URL_FAIL,\n    payload: {\n      msg: err.response.data.message,\n      status: err.response.status,\n    },\n  };\n};\n\nexport const fetchCategory = (categoryId, min_price, max_price, page = 1) => async (dispatch) => {\n  try {\n    console.log(min_price, max_price)\n    dispatch(fetchCategoryStart());\n    let { data } = await axios.get(\n      urls.GET_CONTENT_LIST_BY_CATEGORY_PATH_URL(categoryId,+min_price, +max_price, page)\n    );\n    data.currentPage = page;\n    dispatch(fetchCategorySuccess(data));\n  } catch (error) {\n    dispatch(fetchCategoryFail(error));\n  }\n};\n\nexport const setCurrentPage = (curPage) => ({\n  type: categoryActionTypes.SET_CURRENT_PAGE,\n  payload: curPage,\n});\n\nexport const fetchProductListStart = () => ({\n  type: categoryActionTypes.FETCH_PRODUCT_LIST_START,\n});\nexport const fetchProductListSuccess = (productList) => ({\n  type: categoryActionTypes.FETCH_PRODUCT_LIST_SUCCESS,\n  payload: productList,\n});\nexport const fetchProductListFail = (err) => ({\n  type: categoryActionTypes.FETCH_PRODUCT_LIST_FAIL,\n  payload: { msg: err.response.data.message, status: err.response.status },\n});\n\nexport const fetchProductList = (categoryId, page) => async (dispatch) => {\n  try {\n    dispatch(fetchProductListStart());\n    const { data } = await axios.get(\n      urls.GET_PRODUCT_LIST_PER_PAGE_BY_CATEGORY_PATH_URL(categoryId, page)\n    );\n    dispatch(fetchProductListSuccess(data));\n  } catch (error) {\n    dispatch(fetchCategoryFail(error));\n  }\n};\n\nconst filterProductsByPriceStart = () => ({\n  type: categoryActionTypes.FILTER_PRODUCTS_BY_PRICE_START,\n});\nconst filterProductsByPriceSuccess = (\n  categoryList,\n  productList,\n  numProducts,\n  currentPage,\n  numPages,\n  maxPrice\n) => ({\n  type: categoryActionTypes.FILTER_PRODUCTS_BY_PRICE_SUCCESS,\n  payload: {\n    categoryList,\n    productList,\n    numProducts,\n    currentPage,\n    numPages,\n    maxPrice,\n  },\n});\nconst filterProductsByPriceFail = (err) => ({\n  type: categoryActionTypes.FILTER_PRODUCTS_BY_PRICE_FAIL,\n  payload: { msg: err.response.data.message, status: err.response.status },\n});\n\nexport const filterProductsByPrice = (\n  categoryPath,\n  minPriceChange,\n  maxPriceChange,\n  page = 1\n) => async (dispatch) => {\n  try {\n    dispatch(filterProductsByPriceStart());\n    const {\n      data: {\n        categoryList,\n        productList,\n        numProducts,\n        currentPage,\n        numPages,\n        maxPrice,\n      },\n    } = await axios.get(\n      urls.GET_PRODUCT_LIST_BY_FILTER_PRICE_IN_CATEGORY(\n        categoryPath,\n        minPriceChange,\n        maxPriceChange,\n        page\n      )\n    );\n    dispatch(\n      filterProductsByPriceSuccess(\n        categoryList,\n        productList,\n        numProducts,\n        currentPage,\n        numPages,\n        maxPrice\n      )\n    );\n  } catch (error) {\n    dispatch(filterProductsByPriceFail(error));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}