{"ast":null,"code":"import userActionTypes from \"./user.types\";\nimport axios from \"axios\";\nimport { setAuthToken } from \"../../utils/setAuthToken\";\nexport const fetchUserStart = () => ({\n  type: userActionTypes.FETCH_USER_START\n});\nexport const fetchUserSuccess = user => ({\n  type: userActionTypes.FETCH_USER_SUCCESS,\n  payload: user\n});\nexport const fetchUserFail = () => ({\n  type: userActionTypes.FETCH_USER_FAIL\n});\nexport const fetchUser = () => async dispatch => {\n  try {\n    dispatch(fetchUserStart());\n\n    if (!localStorage.token || !localStorage.expDate) {\n      throw new Error(\"Authentication denied\");\n    }\n\n    if (!localStorage.expDate || Date.parse(localStorage.expDate) < Date.now()) {\n      localStorage.removeItem(\"expDate\");\n      localStorage.removeItem(\"token\");\n      throw new Error(\"Token has expired\");\n    }\n\n    setAuthToken(localStorage.token);\n    console.log(axios.defaults.headers);\n    const {\n      data\n    } = await axios.get(\"/auth/staff\");\n    dispatch(fetchUserSuccess(data));\n  } catch (error) {\n    dispatch(fetchUserFail());\n  }\n};\nexport const registerStart = (name, email, password) => ({\n  type: userActionTypes.REGISTER_START,\n  payload: {\n    name,\n    email,\n    password\n  }\n});\nexport const registerSuccess = user => ({\n  type: userActionTypes.REGISTER_SUCCESS,\n  payload: user\n});\nexport const registerFail = err => ({\n  type: userActionTypes.REGISTER_FAIL,\n  payload: err\n});\nexport const register = formData => dispatch => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      console.log(formData);\n      dispatch(registerStart());\n      const {\n        data: {\n          token,\n          user\n        }\n      } = await axios.post(\"/staff/register\", formData);\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"expDate\", new Date(Date.now() + 60 * 60 * 1000));\n      dispatch(registerSuccess(user));\n      resolve(true);\n    } catch (error) {\n      dispatch(registerFail(error.message));\n      reject(error);\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expDate\");\n  setAuthToken(null);\n  dispatch({\n    type: userActionTypes.LOGOUT\n  });\n};\nexport const loginStart = () => ({\n  type: userActionTypes.LOGIN_START\n});\nexport const loginSuccess = user => ({\n  type: userActionTypes.LOGIN_SUCCESS,\n  payload: user\n});\nexport const loginFail = err => ({\n  type: userActionTypes.LOGIN_FAIL,\n  payload: err\n});\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch(loginStart());\n    console.log(email, password);\n    const {\n      data: {\n        user,\n        token\n      }\n    } = await axios.post(\"/auth/staff\", {\n      email,\n      password\n    });\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expDate\", new Date(Date.now() + 60 * 60 * 1000));\n    dispatch(loginSuccess(user));\n  } catch (error) {\n    dispatch(loginFail(error));\n  }\n};","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/redux/user/user.actions.js"],"names":["userActionTypes","axios","setAuthToken","fetchUserStart","type","FETCH_USER_START","fetchUserSuccess","user","FETCH_USER_SUCCESS","payload","fetchUserFail","FETCH_USER_FAIL","fetchUser","dispatch","localStorage","token","expDate","Error","Date","parse","now","removeItem","console","log","defaults","headers","data","get","error","registerStart","name","email","password","REGISTER_START","registerSuccess","REGISTER_SUCCESS","registerFail","err","REGISTER_FAIL","register","formData","Promise","resolve","reject","post","setItem","message","logout","LOGOUT","loginStart","LOGIN_START","loginSuccess","LOGIN_SUCCESS","loginFail","LOGIN_FAIL","login"],"mappings":"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","sourcesContent":["import userActionTypes from \"./user.types\";\nimport axios from \"axios\";\nimport { setAuthToken } from \"../../utils/setAuthToken\";\nexport const fetchUserStart = () => ({\n  type: userActionTypes.FETCH_USER_START,\n});\nexport const fetchUserSuccess = (user) => ({\n  type: userActionTypes.FETCH_USER_SUCCESS,\n  payload: user,\n});\nexport const fetchUserFail = () => ({\n  type: userActionTypes.FETCH_USER_FAIL,\n});\n\nexport const fetchUser = () => async (dispatch) => {\n  try {\n    dispatch(fetchUserStart());\n    if (!localStorage.token || !localStorage.expDate) {\n      throw new Error(\"Authentication denied\");\n    }\n\n    if (\n      !localStorage.expDate ||\n      Date.parse(localStorage.expDate) < Date.now()\n    ) {\n      localStorage.removeItem(\"expDate\");\n      localStorage.removeItem(\"token\");\n      throw new Error(\"Token has expired\");\n    }\n    setAuthToken(localStorage.token);\n    console.log(axios.defaults.headers);\n    const { data } = await axios.get(\"/auth/staff\");\n    dispatch(fetchUserSuccess(data));\n  } catch (error) {\n    dispatch(fetchUserFail());\n  }\n};\n\nexport const registerStart = (name, email, password) => ({\n  type: userActionTypes.REGISTER_START,\n  payload: { name, email, password },\n});\n\nexport const registerSuccess = (user) => ({\n  type: userActionTypes.REGISTER_SUCCESS,\n  payload: user,\n});\n\nexport const registerFail = (err) => ({\n  type: userActionTypes.REGISTER_FAIL,\n  payload: err,\n});\n\nexport const register = (formData) => (dispatch) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      console.log(formData);\n      dispatch(registerStart());\n      const {\n        data: { token, user },\n      } = await axios.post(\"/staff/register\", formData);\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"expDate\", new Date(Date.now() + 60 * 60 * 1000));\n      dispatch(registerSuccess(user));\n      resolve(true);\n    } catch (error) {\n      dispatch(registerFail(error.message));\n      reject(error);\n    }\n  });\n};\n\nexport const logout = () => (dispatch) => {\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"expDate\");\n  setAuthToken(null);\n  dispatch({\n    type: userActionTypes.LOGOUT,\n  });\n};\n\nexport const loginStart = () => ({\n  type: userActionTypes.LOGIN_START,\n});\n\nexport const loginSuccess = (user) => ({\n  type: userActionTypes.LOGIN_SUCCESS,\n  payload: user,\n});\n\nexport const loginFail = (err) => ({\n  type: userActionTypes.LOGIN_FAIL,\n  payload: err,\n});\n\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    dispatch(loginStart());\n    console.log(email, password);\n    const {\n      data: { user, token },\n    } = await axios.post(\"/auth/staff\", { email, password });\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expDate\", new Date(Date.now() + 60 * 60 * 1000));\n    dispatch(loginSuccess(user));\n  } catch (error) {\n    dispatch(loginFail(error));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}