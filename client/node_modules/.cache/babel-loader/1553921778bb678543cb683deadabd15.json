{"ast":null,"code":"import userActionTypes from \"./user.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nexport const fetchUserStart = () => ({\n  type: userActionTypes.FETCH_USER_START\n});\nexport const fetchUserSuccess = user => ({\n  type: userActionTypes.FETCH_USER_SUCCESS,\n  payload: user\n});\nexport const fetchUserFail = () => ({\n  type: userActionTypes.FETCH_USER_FAIL\n});\nexport const registerStart = (name, email, password) => ({\n  type: userActionTypes.REGISTER_START,\n  payload: {\n    name,\n    email,\n    password\n  }\n});\nexport const registerSuccess = user => ({\n  type: userActionTypes.REGISTER_SUCCESS,\n  payload: user\n});\nexport const registerFail = err => ({\n  type: userActionTypes.REGISTER_FAIL,\n  payload: err\n});\nexport const logoutStart = () => ({\n  type: userActionTypes.LOGOUT_START\n});\nexport const logoutSuccess = () => ({\n  type: userActionTypes.LOGOUT_SUCCESS\n});\nexport const checkAuthTimeout = timeout => ({\n  type: userActionTypes.CHECK_AUTH_TIMEOUT,\n  payload: timeout\n});\nexport const loginStart = (email, password) => ({\n  type: userActionTypes.LOGIN_START,\n  payload: {\n    email,\n    password\n  }\n});\nexport const loginSuccess = user => ({\n  type: userActionTypes.LOGIN_SUCCESS,\n  payload: user\n});\nexport const loginFail = err => ({\n  type: userActionTypes.LOGIN_FAIL,\n  payload: err\n});\nexport const loginFacebookStart = (id, name, email) => ({\n  type: userActionTypes.LOGIN_VIA_FACEBOOK_START,\n  payload: {\n    id,\n    email,\n    name\n  }\n});\nexport const loginGoogleStart = (id, name, email) => ({\n  type: userActionTypes.LOGIN_VIA_GOOGLE_START,\n  payload: {\n    id,\n    email,\n    name\n  }\n});\nexport const restoreAccountStart = () => ({\n  type: userActionTypes.RESTORE_ACCOUNT_START\n});\nexport const restoreAccountSuccess = () => ({\n  type: userActionTypes.RESTORE_ACCOUNT_SUCCESS\n});\nexport const restoreAccountFail = err => ({\n  type: userActionTypes.RESTORE_ACCOUNT_FAIL,\n  payload: err\n});\nexport const restoreAccount = email => dispatch => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      dispatch(restoreAccountStart());\n      console.log(axios.defaults.headers);\n      await axios.post(\"/user/restore-account\", {\n        email\n      });\n      dispatch(restoreAccountSuccess());\n      resolve(true);\n    } catch (error) {\n      dispatch(restoreAccountFail(error.response.data.message));\n      reject(false);\n    }\n  });\n};\nexport const updateUserInfoStart = () => ({\n  type: userActionTypes.UPDATE_USER_INFO_START\n});\nexport const updateUserInfoSuccess = userInformation => ({\n  type: userActionTypes.UPDATE_USER_INFO_SUCCESS,\n  payload: userInformation\n});\nexport const updateUserInfoFail = err => ({\n  type: userActionTypes.UPDATE_USER_INFO_FAIL,\n  payload: {\n    msg: err.response.data.message,\n    status: err.response.status\n  }\n});\nexport const updateUserInfo = userInfo => dispatch => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const {\n        data\n      } = await axios.put(urls.UPDATE_USER_INFO, {\n        userInfo\n      });\n      console.log(data);\n    } catch (error) {\n      updateUserInfoFail(error);\n      reject(error);\n    }\n  });\n};","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/redux/user/user.actions.js"],"names":["userActionTypes","axios","urls","fetchUserStart","type","FETCH_USER_START","fetchUserSuccess","user","FETCH_USER_SUCCESS","payload","fetchUserFail","FETCH_USER_FAIL","registerStart","name","email","password","REGISTER_START","registerSuccess","REGISTER_SUCCESS","registerFail","err","REGISTER_FAIL","logoutStart","LOGOUT_START","logoutSuccess","LOGOUT_SUCCESS","checkAuthTimeout","timeout","CHECK_AUTH_TIMEOUT","loginStart","LOGIN_START","loginSuccess","LOGIN_SUCCESS","loginFail","LOGIN_FAIL","loginFacebookStart","id","LOGIN_VIA_FACEBOOK_START","loginGoogleStart","LOGIN_VIA_GOOGLE_START","restoreAccountStart","RESTORE_ACCOUNT_START","restoreAccountSuccess","RESTORE_ACCOUNT_SUCCESS","restoreAccountFail","RESTORE_ACCOUNT_FAIL","restoreAccount","dispatch","Promise","resolve","reject","console","log","defaults","headers","post","error","response","data","message","updateUserInfoStart","UPDATE_USER_INFO_START","updateUserInfoSuccess","userInformation","UPDATE_USER_INFO_SUCCESS","updateUserInfoFail","UPDATE_USER_INFO_FAIL","msg","status","updateUserInfo","userInfo","put","UPDATE_USER_INFO"],"mappings":"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","sourcesContent":["import userActionTypes from \"./user.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nexport const fetchUserStart = () => ({\n  type: userActionTypes.FETCH_USER_START,\n});\nexport const fetchUserSuccess = (user) => ({\n  type: userActionTypes.FETCH_USER_SUCCESS,\n  payload: user,\n});\nexport const fetchUserFail = () => ({\n  type: userActionTypes.FETCH_USER_FAIL,\n});\n\nexport const registerStart = (name, email, password) => ({\n  type: userActionTypes.REGISTER_START,\n  payload: { name, email, password },\n});\n\nexport const registerSuccess = (user) => ({\n  type: userActionTypes.REGISTER_SUCCESS,\n  payload: user,\n});\n\nexport const registerFail = (err) => ({\n  type: userActionTypes.REGISTER_FAIL,\n  payload: err,\n});\n\nexport const logoutStart = () => ({\n  type: userActionTypes.LOGOUT_START,\n});\n\nexport const logoutSuccess = () => ({\n  type: userActionTypes.LOGOUT_SUCCESS,\n});\n\nexport const checkAuthTimeout = (timeout) => ({\n  type: userActionTypes.CHECK_AUTH_TIMEOUT,\n  payload: timeout,\n});\n\nexport const loginStart = (email, password) => ({\n  type: userActionTypes.LOGIN_START,\n  payload: { email, password },\n});\n\nexport const loginSuccess = (user) => ({\n  type: userActionTypes.LOGIN_SUCCESS,\n  payload: user,\n});\n\nexport const loginFail = (err) => ({\n  type: userActionTypes.LOGIN_FAIL,\n  payload: err,\n});\n\nexport const loginFacebookStart = (id, name, email) => ({\n  type: userActionTypes.LOGIN_VIA_FACEBOOK_START,\n  payload: { id, email, name },\n});\nexport const loginGoogleStart = (id, name, email) => ({\n  type: userActionTypes.LOGIN_VIA_GOOGLE_START,\n  payload: { id, email, name },\n});\n\nexport const restoreAccountStart = () => ({\n  type: userActionTypes.RESTORE_ACCOUNT_START,\n});\n\nexport const restoreAccountSuccess = () => ({\n  type: userActionTypes.RESTORE_ACCOUNT_SUCCESS,\n});\n\nexport const restoreAccountFail = (err) => ({\n  type: userActionTypes.RESTORE_ACCOUNT_FAIL,\n  payload: err,\n});\n\nexport const restoreAccount = (email) => (dispatch) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      dispatch(restoreAccountStart());\n      console.log(axios.defaults.headers);\n      await axios.post(\"/user/restore-account\", { email });\n      dispatch(restoreAccountSuccess());\n      resolve(true);\n    } catch (error) {\n      dispatch(restoreAccountFail(error.response.data.message));\n      reject(false);\n    }\n  });\n};\n\nexport const updateUserInfoStart = () => ({\n  type: userActionTypes.UPDATE_USER_INFO_START,\n});\n\nexport const updateUserInfoSuccess = (userInformation) => ({\n  type: userActionTypes.UPDATE_USER_INFO_SUCCESS,\n  payload: userInformation,\n});\n\nexport const updateUserInfoFail = (err) => ({\n  type: userActionTypes.UPDATE_USER_INFO_FAIL,\n  payload: { msg: err.response.data.message, status: err.response.status },\n});\n\nexport const updateUserInfo = (userInfo) => (dispatch) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const { data } = await axios.put(urls.UPDATE_USER_INFO, { userInfo });\n      console.log(data);\n    } catch (error) {\n      updateUserInfoFail(error);\n      reject(error);\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"module"}