{"ast":null,"code":"import { a as getCardTypeByValue } from './cardTypes-4f45f8d3.js';\nvar MONTH_REGEX = /(0[1-9]|1[0-2])/;\nvar EMPTY_CARD_NUMBER = 'Enter a card number';\nvar EMPTY_EXPIRY_DATE = 'Enter an expiry date';\nvar EMPTY_CVC = 'Enter a CVC';\nvar EMPTY_ZIP = 'Enter a ZIP code';\nvar INVALID_CARD_NUMBER = 'Card number is invalid';\nvar INVALID_EXPIRY_DATE = 'Expiry date is invalid';\nvar INVALID_CVC = 'CVC is invalid';\nvar MONTH_OUT_OF_RANGE = 'Expiry month must be between 01 and 12';\nvar YEAR_OUT_OF_RANGE = 'Expiry year cannot be in the past';\nvar DATE_OUT_OF_RANGE = 'Expiry date cannot be in the past';\n\nvar hasCardNumberReachedMaxLength = function hasCardNumberReachedMaxLength(currentValue) {\n  var cardType = getCardTypeByValue(currentValue);\n  return cardType && currentValue.length >= cardType.lengths[cardType.lengths.length - 1];\n};\n\nvar isNumeric = function isNumeric(e) {\n  return /^\\d*$/.test(e.key);\n};\n\nvar validateLuhn = function validateLuhn(cardNumber) {\n  return cardNumber.split('').reverse().map(function (digit) {\n    return parseInt(digit, 10);\n  }).map(function (digit, idx) {\n    return idx % 2 ? digit * 2 : digit;\n  }).map(function (digit) {\n    return digit > 9 ? digit % 10 + 1 : digit;\n  }).reduce(function (accum, digit) {\n    return accum += digit;\n  }) % 10 === 0;\n};\n\nvar getCardNumberError = function getCardNumberError(cardNumber, cardNumberValidator) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$errorMessages = _ref.errorMessages,\n      errorMessages = _ref$errorMessages === void 0 ? {} : _ref$errorMessages;\n\n  if (!cardNumber) {\n    return errorMessages.emptyCardNumber || EMPTY_CARD_NUMBER;\n  }\n\n  var rawCardNumber = cardNumber.replace(/\\s/g, '');\n  var cardType = getCardTypeByValue(rawCardNumber);\n\n  if (cardType && cardType.lengths) {\n    var doesCardNumberMatchLength = cardType.lengths.includes(rawCardNumber.length);\n\n    if (doesCardNumberMatchLength) {\n      var isLuhnValid = validateLuhn(rawCardNumber);\n\n      if (isLuhnValid) {\n        if (cardNumberValidator) {\n          return cardNumberValidator({\n            cardNumber: rawCardNumber,\n            cardType: cardType,\n            errorMessages: errorMessages\n          });\n        }\n\n        return;\n      }\n    }\n  }\n\n  return errorMessages.invalidCardNumber || INVALID_CARD_NUMBER;\n};\n\nvar getExpiryDateError = function getExpiryDateError(expiryDate, expiryValidator) {\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$errorMessages = _ref2.errorMessages,\n      errorMessages = _ref2$errorMessages === void 0 ? {} : _ref2$errorMessages;\n\n  if (!expiryDate) {\n    return errorMessages.emptyExpiryDate || EMPTY_EXPIRY_DATE;\n  }\n\n  var rawExpiryDate = expiryDate.replace(' / ', '').replace('/', '');\n\n  if (rawExpiryDate.length === 4) {\n    var month = rawExpiryDate.slice(0, 2);\n    var year = \"20\".concat(rawExpiryDate.slice(2, 4));\n\n    if (!MONTH_REGEX.test(month)) {\n      return errorMessages.monthOutOfRange || MONTH_OUT_OF_RANGE;\n    }\n\n    if (parseInt(year) < new Date().getFullYear()) {\n      return errorMessages.yearOutOfRange || YEAR_OUT_OF_RANGE;\n    }\n\n    if (parseInt(year) === new Date().getFullYear() && parseInt(month) < new Date().getMonth() + 1) {\n      return errorMessages.dateOutOfRange || DATE_OUT_OF_RANGE;\n    }\n\n    if (expiryValidator) {\n      return expiryValidator({\n        expiryDate: {\n          month: month,\n          year: year\n        },\n        errorMessages: errorMessages\n      });\n    }\n\n    return;\n  }\n\n  return errorMessages.invalidExpiryDate || INVALID_EXPIRY_DATE;\n};\n\nvar getCVCError = function getCVCError(cvc, cvcValidator) {\n  var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      cardType = _ref3.cardType,\n      _ref3$errorMessages = _ref3.errorMessages,\n      errorMessages = _ref3$errorMessages === void 0 ? {} : _ref3$errorMessages;\n\n  if (!cvc) {\n    return errorMessages.emptyCVC || EMPTY_CVC;\n  }\n\n  if (cvc.length < 3) {\n    return errorMessages.invalidCVC || INVALID_CVC;\n  }\n\n  if (cardType && cvc.length !== cardType.code.length) {\n    return errorMessages.invalidCVC || INVALID_CVC;\n  }\n\n  if (cvcValidator) {\n    return cvcValidator({\n      cvc: cvc,\n      cardType: cardType,\n      errorMessages: errorMessages\n    });\n  }\n\n  return;\n};\n\nvar getZIPError = function getZIPError(zip) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref4$errorMessages = _ref4.errorMessages,\n      errorMessages = _ref4$errorMessages === void 0 ? {} : _ref4$errorMessages;\n\n  if (!zip) {\n    return errorMessages.emptyZIP || EMPTY_ZIP;\n  }\n\n  return;\n};\n\nvar validator = /*#__PURE__*/Object.freeze({\n  EMPTY_CARD_NUMBER: EMPTY_CARD_NUMBER,\n  EMPTY_EXPIRY_DATE: EMPTY_EXPIRY_DATE,\n  EMPTY_CVC: EMPTY_CVC,\n  EMPTY_ZIP: EMPTY_ZIP,\n  INVALID_CARD_NUMBER: INVALID_CARD_NUMBER,\n  INVALID_EXPIRY_DATE: INVALID_EXPIRY_DATE,\n  INVALID_CVC: INVALID_CVC,\n  MONTH_OUT_OF_RANGE: MONTH_OUT_OF_RANGE,\n  YEAR_OUT_OF_RANGE: YEAR_OUT_OF_RANGE,\n  DATE_OUT_OF_RANGE: DATE_OUT_OF_RANGE,\n  hasCardNumberReachedMaxLength: hasCardNumberReachedMaxLength,\n  isNumeric: isNumeric,\n  validateLuhn: validateLuhn,\n  getCardNumberError: getCardNumberError,\n  getExpiryDateError: getExpiryDateError,\n  getCVCError: getCVCError,\n  getZIPError: getZIPError\n});\nexport { validator as a, EMPTY_CARD_NUMBER as b, EMPTY_EXPIRY_DATE as c, EMPTY_CVC as d, EMPTY_ZIP as e, INVALID_CARD_NUMBER as f, INVALID_EXPIRY_DATE as g, INVALID_CVC as h, MONTH_OUT_OF_RANGE as i, YEAR_OUT_OF_RANGE as j, DATE_OUT_OF_RANGE as k, hasCardNumberReachedMaxLength as l, isNumeric as m, validateLuhn as n, getCardNumberError as o, getExpiryDateError as p, getCVCError as q, getZIPError as r };","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/node_modules/react-payment-inputs/es/utils/validator-0f41e23d.js"],"names":["a","getCardTypeByValue","MONTH_REGEX","EMPTY_CARD_NUMBER","EMPTY_EXPIRY_DATE","EMPTY_CVC","EMPTY_ZIP","INVALID_CARD_NUMBER","INVALID_EXPIRY_DATE","INVALID_CVC","MONTH_OUT_OF_RANGE","YEAR_OUT_OF_RANGE","DATE_OUT_OF_RANGE","hasCardNumberReachedMaxLength","currentValue","cardType","length","lengths","isNumeric","e","test","key","validateLuhn","cardNumber","split","reverse","map","digit","parseInt","idx","reduce","accum","getCardNumberError","cardNumberValidator","_ref","arguments","undefined","_ref$errorMessages","errorMessages","emptyCardNumber","rawCardNumber","replace","doesCardNumberMatchLength","includes","isLuhnValid","invalidCardNumber","getExpiryDateError","expiryDate","expiryValidator","_ref2","_ref2$errorMessages","emptyExpiryDate","rawExpiryDate","month","slice","year","concat","monthOutOfRange","Date","getFullYear","yearOutOfRange","getMonth","dateOutOfRange","invalidExpiryDate","getCVCError","cvc","cvcValidator","_ref3","_ref3$errorMessages","emptyCVC","invalidCVC","code","getZIPError","zip","_ref4","_ref4$errorMessages","emptyZIP","validator","Object","freeze","b","c","d","f","g","h","i","j","k","l","m","n","o","p","q","r"],"mappings":"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","sourcesContent":["import { a as getCardTypeByValue } from './cardTypes-4f45f8d3.js';\n\nvar MONTH_REGEX = /(0[1-9]|1[0-2])/;\nvar EMPTY_CARD_NUMBER = 'Enter a card number';\nvar EMPTY_EXPIRY_DATE = 'Enter an expiry date';\nvar EMPTY_CVC = 'Enter a CVC';\nvar EMPTY_ZIP = 'Enter a ZIP code';\nvar INVALID_CARD_NUMBER = 'Card number is invalid';\nvar INVALID_EXPIRY_DATE = 'Expiry date is invalid';\nvar INVALID_CVC = 'CVC is invalid';\nvar MONTH_OUT_OF_RANGE = 'Expiry month must be between 01 and 12';\nvar YEAR_OUT_OF_RANGE = 'Expiry year cannot be in the past';\nvar DATE_OUT_OF_RANGE = 'Expiry date cannot be in the past';\nvar hasCardNumberReachedMaxLength = function hasCardNumberReachedMaxLength(currentValue) {\n  var cardType = getCardTypeByValue(currentValue);\n  return cardType && currentValue.length >= cardType.lengths[cardType.lengths.length - 1];\n};\nvar isNumeric = function isNumeric(e) {\n  return /^\\d*$/.test(e.key);\n};\nvar validateLuhn = function validateLuhn(cardNumber) {\n  return cardNumber.split('').reverse().map(function (digit) {\n    return parseInt(digit, 10);\n  }).map(function (digit, idx) {\n    return idx % 2 ? digit * 2 : digit;\n  }).map(function (digit) {\n    return digit > 9 ? digit % 10 + 1 : digit;\n  }).reduce(function (accum, digit) {\n    return accum += digit;\n  }) % 10 === 0;\n};\nvar getCardNumberError = function getCardNumberError(cardNumber, cardNumberValidator) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$errorMessages = _ref.errorMessages,\n      errorMessages = _ref$errorMessages === void 0 ? {} : _ref$errorMessages;\n\n  if (!cardNumber) {\n    return errorMessages.emptyCardNumber || EMPTY_CARD_NUMBER;\n  }\n\n  var rawCardNumber = cardNumber.replace(/\\s/g, '');\n  var cardType = getCardTypeByValue(rawCardNumber);\n\n  if (cardType && cardType.lengths) {\n    var doesCardNumberMatchLength = cardType.lengths.includes(rawCardNumber.length);\n\n    if (doesCardNumberMatchLength) {\n      var isLuhnValid = validateLuhn(rawCardNumber);\n\n      if (isLuhnValid) {\n        if (cardNumberValidator) {\n          return cardNumberValidator({\n            cardNumber: rawCardNumber,\n            cardType: cardType,\n            errorMessages: errorMessages\n          });\n        }\n\n        return;\n      }\n    }\n  }\n\n  return errorMessages.invalidCardNumber || INVALID_CARD_NUMBER;\n};\nvar getExpiryDateError = function getExpiryDateError(expiryDate, expiryValidator) {\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$errorMessages = _ref2.errorMessages,\n      errorMessages = _ref2$errorMessages === void 0 ? {} : _ref2$errorMessages;\n\n  if (!expiryDate) {\n    return errorMessages.emptyExpiryDate || EMPTY_EXPIRY_DATE;\n  }\n\n  var rawExpiryDate = expiryDate.replace(' / ', '').replace('/', '');\n\n  if (rawExpiryDate.length === 4) {\n    var month = rawExpiryDate.slice(0, 2);\n    var year = \"20\".concat(rawExpiryDate.slice(2, 4));\n\n    if (!MONTH_REGEX.test(month)) {\n      return errorMessages.monthOutOfRange || MONTH_OUT_OF_RANGE;\n    }\n\n    if (parseInt(year) < new Date().getFullYear()) {\n      return errorMessages.yearOutOfRange || YEAR_OUT_OF_RANGE;\n    }\n\n    if (parseInt(year) === new Date().getFullYear() && parseInt(month) < new Date().getMonth() + 1) {\n      return errorMessages.dateOutOfRange || DATE_OUT_OF_RANGE;\n    }\n\n    if (expiryValidator) {\n      return expiryValidator({\n        expiryDate: {\n          month: month,\n          year: year\n        },\n        errorMessages: errorMessages\n      });\n    }\n\n    return;\n  }\n\n  return errorMessages.invalidExpiryDate || INVALID_EXPIRY_DATE;\n};\nvar getCVCError = function getCVCError(cvc, cvcValidator) {\n  var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      cardType = _ref3.cardType,\n      _ref3$errorMessages = _ref3.errorMessages,\n      errorMessages = _ref3$errorMessages === void 0 ? {} : _ref3$errorMessages;\n\n  if (!cvc) {\n    return errorMessages.emptyCVC || EMPTY_CVC;\n  }\n\n  if (cvc.length < 3) {\n    return errorMessages.invalidCVC || INVALID_CVC;\n  }\n\n  if (cardType && cvc.length !== cardType.code.length) {\n    return errorMessages.invalidCVC || INVALID_CVC;\n  }\n\n  if (cvcValidator) {\n    return cvcValidator({\n      cvc: cvc,\n      cardType: cardType,\n      errorMessages: errorMessages\n    });\n  }\n\n  return;\n};\nvar getZIPError = function getZIPError(zip) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref4$errorMessages = _ref4.errorMessages,\n      errorMessages = _ref4$errorMessages === void 0 ? {} : _ref4$errorMessages;\n\n  if (!zip) {\n    return errorMessages.emptyZIP || EMPTY_ZIP;\n  }\n\n  return;\n};\n\nvar validator = /*#__PURE__*/Object.freeze({\n  EMPTY_CARD_NUMBER: EMPTY_CARD_NUMBER,\n  EMPTY_EXPIRY_DATE: EMPTY_EXPIRY_DATE,\n  EMPTY_CVC: EMPTY_CVC,\n  EMPTY_ZIP: EMPTY_ZIP,\n  INVALID_CARD_NUMBER: INVALID_CARD_NUMBER,\n  INVALID_EXPIRY_DATE: INVALID_EXPIRY_DATE,\n  INVALID_CVC: INVALID_CVC,\n  MONTH_OUT_OF_RANGE: MONTH_OUT_OF_RANGE,\n  YEAR_OUT_OF_RANGE: YEAR_OUT_OF_RANGE,\n  DATE_OUT_OF_RANGE: DATE_OUT_OF_RANGE,\n  hasCardNumberReachedMaxLength: hasCardNumberReachedMaxLength,\n  isNumeric: isNumeric,\n  validateLuhn: validateLuhn,\n  getCardNumberError: getCardNumberError,\n  getExpiryDateError: getExpiryDateError,\n  getCVCError: getCVCError,\n  getZIPError: getZIPError\n});\n\nexport { validator as a, EMPTY_CARD_NUMBER as b, EMPTY_EXPIRY_DATE as c, EMPTY_CVC as d, EMPTY_ZIP as e, INVALID_CARD_NUMBER as f, INVALID_EXPIRY_DATE as g, INVALID_CVC as h, MONTH_OUT_OF_RANGE as i, YEAR_OUT_OF_RANGE as j, DATE_OUT_OF_RANGE as k, hasCardNumberReachedMaxLength as l, isNumeric as m, validateLuhn as n, getCardNumberError as o, getExpiryDateError as p, getCVCError as q, getZIPError as r };\n"]},"metadata":{},"sourceType":"module"}