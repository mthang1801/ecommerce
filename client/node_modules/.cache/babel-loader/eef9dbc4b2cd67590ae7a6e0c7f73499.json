{"ast":null,"code":"import productGroupActionTypes from \"./product-group.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nexport const fetchProductGroupStart = () => ({\n  type: productGroupActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_START\n});\nexport const fetchProductGroupSuccess = ({\n  name,\n  discountProductList,\n  topRatedProducts,\n  bestSellerProducts,\n  productList,\n  numProducts,\n  currentPage,\n  numPages,\n  maxPrice\n}) => ({\n  type: productGroupActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_SUCCESS,\n  payload: {\n    name,\n    discountProductList,\n    topRatedProducts,\n    bestSellerProducts,\n    productList,\n    numProducts,\n    currentPage,\n    numPages,\n    maxPrice\n  }\n});\nexport const fetchProductGroupFail = err => ({\n  type: productGroupActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_FAIL,\n  payload: {\n    msg: err.response.data.message,\n    status: err.response.status\n  }\n});\nexport const fetchProductGroup = (productGroupId, min_price, max_price, page = 1) => async dispatch => {\n  try {\n    dispatch(fetchProductGroupStart());\n    console.log(productGroupPath);\n    let {\n      data\n    } = await axios.get(urls.GET_CONTENT_LIST_BY_PRODUCT_GROUP_PATH_URL(productGroupId, min_price, max_price, page));\n    data.currentPage = page;\n    dispatch(fetchProductGroupSuccess(data));\n  } catch (error) {\n    dispatch(fetchProductGroupFail(error));\n  }\n};\nexport const setCurrentPage = curPage => ({\n  type: productGroupActionTypes.SET_CURRENT_PAGE,\n  payload: curPage\n});","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/redux/product-group/product-group.actions.js"],"names":["productGroupActionTypes","axios","urls","fetchProductGroupStart","type","FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_START","fetchProductGroupSuccess","name","discountProductList","topRatedProducts","bestSellerProducts","productList","numProducts","currentPage","numPages","maxPrice","FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_SUCCESS","payload","fetchProductGroupFail","err","FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_FAIL","msg","response","data","message","status","fetchProductGroup","productGroupId","min_price","max_price","page","dispatch","console","log","productGroupPath","get","GET_CONTENT_LIST_BY_PRODUCT_GROUP_PATH_URL","error","setCurrentPage","curPage","SET_CURRENT_PAGE"],"mappings":"AAAA,OAAOA,uBAAP,MAAoC,uBAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAO,MAAMC,sBAAsB,GAAG,OAAO;AAC3CC,EAAAA,IAAI,EAAEJ,uBAAuB,CAACK;AADa,CAAP,CAA/B;AAGP,OAAO,MAAMC,wBAAwB,GAAG,CAAC;AACvCC,EAAAA,IADuC;AAEvCC,EAAAA,mBAFuC;AAGvCC,EAAAA,gBAHuC;AAIvCC,EAAAA,kBAJuC;AAKvCC,EAAAA,WALuC;AAMvCC,EAAAA,WANuC;AAOvCC,EAAAA,WAPuC;AAQvCC,EAAAA,QARuC;AASvCC,EAAAA;AATuC,CAAD,MAUjC;AACLX,EAAAA,IAAI,EAAEJ,uBAAuB,CAACgB,2CADzB;AAELC,EAAAA,OAAO,EAAE;AACPV,IAAAA,IADO;AAEPC,IAAAA,mBAFO;AAGPC,IAAAA,gBAHO;AAIPC,IAAAA,kBAJO;AAKPC,IAAAA,WALO;AAMPC,IAAAA,WANO;AAOPC,IAAAA,WAPO;AAQPC,IAAAA,QARO;AASPC,IAAAA;AATO;AAFJ,CAViC,CAAjC;AAwBP,OAAO,MAAMG,qBAAqB,GAAIC,GAAD,KAAU;AAC7Cf,EAAAA,IAAI,EAAEJ,uBAAuB,CAACoB,wCADe;AAE7CH,EAAAA,OAAO,EAAE;AAAEI,IAAAA,GAAG,EAAEF,GAAG,CAACG,QAAJ,CAAaC,IAAb,CAAkBC,OAAzB;AAAkCC,IAAAA,MAAM,EAAEN,GAAG,CAACG,QAAJ,CAAaG;AAAvD;AAFoC,CAAV,CAA9B;AAKP,OAAO,MAAMC,iBAAiB,GAAG,CAC/BC,cAD+B,EAE/BC,SAF+B,EAG/BC,SAH+B,EAI/BC,IAAI,GAAG,CAJwB,KAK5B,MAAOC,QAAP,IAAoB;AACvB,MAAI;AACFA,IAAAA,QAAQ,CAAC5B,sBAAsB,EAAvB,CAAR;AACA6B,IAAAA,OAAO,CAACC,GAAR,CAAYC,gBAAZ;AACA,QAAI;AAAEX,MAAAA;AAAF,QAAW,MAAMtB,KAAK,CAACkC,GAAN,CACnBjC,IAAI,CAACkC,0CAAL,CACET,cADF,EAEEC,SAFF,EAGEC,SAHF,EAIEC,IAJF,CADmB,CAArB;AAQAP,IAAAA,IAAI,CAACV,WAAL,GAAmBiB,IAAnB;AACAC,IAAAA,QAAQ,CAACzB,wBAAwB,CAACiB,IAAD,CAAzB,CAAR;AACD,GAbD,CAaE,OAAOc,KAAP,EAAc;AACdN,IAAAA,QAAQ,CAACb,qBAAqB,CAACmB,KAAD,CAAtB,CAAR;AACD;AACF,CAtBM;AAwBP,OAAO,MAAMC,cAAc,GAAIC,OAAD,KAAc;AAC1CnC,EAAAA,IAAI,EAAEJ,uBAAuB,CAACwC,gBADY;AAE1CvB,EAAAA,OAAO,EAAEsB;AAFiC,CAAd,CAAvB","sourcesContent":["import productGroupActionTypes from \"./product-group.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nexport const fetchProductGroupStart = () => ({\n  type: productGroupActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_START,\n});\nexport const fetchProductGroupSuccess = ({\n  name,\n  discountProductList,\n  topRatedProducts,\n  bestSellerProducts,\n  productList,\n  numProducts,\n  currentPage,\n  numPages,\n  maxPrice,\n}) => ({\n  type: productGroupActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_SUCCESS,\n  payload: {\n    name,\n    discountProductList,\n    topRatedProducts,\n    bestSellerProducts,\n    productList,\n    numProducts,\n    currentPage,\n    numPages,\n    maxPrice,\n  },\n});\nexport const fetchProductGroupFail = (err) => ({\n  type: productGroupActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_GROUP_FAIL,\n  payload: { msg: err.response.data.message, status: err.response.status },\n});\n\nexport const fetchProductGroup = (\n  productGroupId,\n  min_price,\n  max_price, \n  page = 1 \n) => async (dispatch) => {\n  try {\n    dispatch(fetchProductGroupStart());\n    console.log(productGroupPath);\n    let { data } = await axios.get(\n      urls.GET_CONTENT_LIST_BY_PRODUCT_GROUP_PATH_URL(\n        productGroupId,\n        min_price,\n        max_price, \n        page\n      )\n    );\n    data.currentPage = page;\n    dispatch(fetchProductGroupSuccess(data));\n  } catch (error) {\n    dispatch(fetchProductGroupFail(error));\n  }\n};\n\nexport const setCurrentPage = (curPage) => ({\n  type: productGroupActionTypes.SET_CURRENT_PAGE,\n  payload: curPage,\n});\n"]},"metadata":{},"sourceType":"module"}