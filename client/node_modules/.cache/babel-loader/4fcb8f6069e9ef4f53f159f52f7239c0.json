{"ast":null,"code":"import userActionTypes from \"./user.types\";\nimport axios from \"axios\";\nexport const fetchUserStart = () => ({\n  type: userActionTypes.FETCH_USER_START\n});\nexport const fetchUserSuccess = user => ({\n  type: userActionTypes.FETCH_USER_SUCCESS,\n  payload: user\n});\nexport const fetchUserFail = () => ({\n  type: userActionTypes.FETCH_USER_FAIL\n});\nexport const registerStart = (name, email, password) => ({\n  type: userActionTypes.REGISTER_START,\n  payload: {\n    name,\n    email,\n    password\n  }\n});\nexport const registerSuccess = user => ({\n  type: userActionTypes.REGISTER_SUCCESS,\n  payload: user\n});\nexport const registerFail = err => ({\n  type: userActionTypes.REGISTER_FAIL,\n  payload: err\n}); // export const logout = () => (dispatch) => {\n//   localStorage.removeItem(\"userToken\");\n//   localStorage.removeItem(\"userExpDate\");\n//   dispatch({\n//     type: userActionTypes.LOGOUT,\n//   });\n// };\n\nexport const logoutStart = () => ({\n  type: userActionTypes.LOGOUT_START\n});\nexport const logoutSuccess = () => ({\n  type: userActionTypes.LOGOUT_SUCCESS\n});\nexport const checkExpirationTime = () => ({\n  type: userActionTypes.CHECK_EXPIRATION_TIME\n}); // export const checkAuthTimeout = (expirationTime) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(logout());\n//   }, expirationTime * 1000);\n// };\n// export const register = (formData) => (dispatch) => {\n//   return new Promise(async (resolve, reject) => {\n//     try {\n//       console.log(formData);\n//       dispatch(registerStart());\n//       const {\n//         data: { token, user },\n//       } = await axios.post(\"/staff/register\", formData);\n//       localStorage.setItem(\"token\", token);\n//       localStorage.setItem(\"expDate\", new Date(Date.now() + 60 * 60 * 1000));\n//       dispatch(registerSuccess(user));\n//       resolve(true);\n//     } catch (error) {\n//       dispatch(registerFail(error.message));\n//       reject(error);\n//     }\n//   });\n// };\n// export const loginStart = () => ({\n//   type: userActionTypes.LOGIN_START,\n// });\n// export const loginSuccess = (user) => ({\n//   type: userActionTypes.LOGIN_SUCCESS,\n//   payload: user,\n// });\n// export const loginFail = (err) => ({\n//   type: userActionTypes.LOGIN_FAIL,\n//   payload: err,\n// });\n// export const login = (email, password) => async (dispatch) => {\n//   try {\n//     dispatch(loginStart());\n//     console.log(email, password);\n//     const {\n//       data: { user, token },\n//     } = await axios.post(\"/auth/staff\", { email, password });\n//     localStorage.setItem(\"token\", token);\n//     localStorage.setItem(\"expDate\", new Date(Date.now() + 60 * 60 * 1000));\n//     dispatch(loginSuccess(user));\n//   } catch (error) {\n//     dispatch(loginFail(error));\n//   }\n// };","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/redux/user/user.actions.js"],"names":["userActionTypes","axios","fetchUserStart","type","FETCH_USER_START","fetchUserSuccess","user","FETCH_USER_SUCCESS","payload","fetchUserFail","FETCH_USER_FAIL","registerStart","name","email","password","REGISTER_START","registerSuccess","REGISTER_SUCCESS","registerFail","err","REGISTER_FAIL","logoutStart","LOGOUT_START","logoutSuccess","LOGOUT_SUCCESS","checkExpirationTime","CHECK_EXPIRATION_TIME"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,cAAc,GAAG,OAAO;AACnCC,EAAAA,IAAI,EAAEH,eAAe,CAACI;AADa,CAAP,CAAvB;AAGP,OAAO,MAAMC,gBAAgB,GAAIC,IAAD,KAAW;AACzCH,EAAAA,IAAI,EAAEH,eAAe,CAACO,kBADmB;AAEzCC,EAAAA,OAAO,EAAEF;AAFgC,CAAX,CAAzB;AAIP,OAAO,MAAMG,aAAa,GAAG,OAAO;AAClCN,EAAAA,IAAI,EAAEH,eAAe,CAACU;AADY,CAAP,CAAtB;AAIP,OAAO,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,MAA4B;AACvDX,EAAAA,IAAI,EAAEH,eAAe,CAACe,cADiC;AAEvDP,EAAAA,OAAO,EAAE;AAAEI,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf;AAF8C,CAA5B,CAAtB;AAKP,OAAO,MAAME,eAAe,GAAIV,IAAD,KAAW;AACxCH,EAAAA,IAAI,EAAEH,eAAe,CAACiB,gBADkB;AAExCT,EAAAA,OAAO,EAAEF;AAF+B,CAAX,CAAxB;AAKP,OAAO,MAAMY,YAAY,GAAIC,GAAD,KAAU;AACpChB,EAAAA,IAAI,EAAEH,eAAe,CAACoB,aADc;AAEpCZ,EAAAA,OAAO,EAAEW;AAF2B,CAAV,CAArB,C,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,WAAW,GAAG,OAAO;AAChClB,EAAAA,IAAI,EAAEH,eAAe,CAACsB;AADU,CAAP,CAApB;AAIP,OAAO,MAAMC,aAAa,GAAG,OAAO;AAClCpB,EAAAA,IAAI,EAAEH,eAAe,CAACwB;AADY,CAAP,CAAtB;AAIP,OAAO,MAAMC,mBAAmB,GAAG,OAAO;AACxCtB,EAAAA,IAAI,EAAEH,eAAe,CAAC0B;AADkB,CAAP,CAA5B,C,CAGP;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import userActionTypes from \"./user.types\";\nimport axios from \"axios\";\nexport const fetchUserStart = () => ({\n  type: userActionTypes.FETCH_USER_START,\n});\nexport const fetchUserSuccess = (user) => ({\n  type: userActionTypes.FETCH_USER_SUCCESS,\n  payload: user,\n});\nexport const fetchUserFail = () => ({\n  type: userActionTypes.FETCH_USER_FAIL,\n});\n\nexport const registerStart = (name, email, password) => ({\n  type: userActionTypes.REGISTER_START,\n  payload: { name, email, password },\n});\n\nexport const registerSuccess = (user) => ({\n  type: userActionTypes.REGISTER_SUCCESS,\n  payload: user,\n});\n\nexport const registerFail = (err) => ({\n  type: userActionTypes.REGISTER_FAIL,\n  payload: err,\n});\n\n// export const logout = () => (dispatch) => {\n//   localStorage.removeItem(\"userToken\");\n//   localStorage.removeItem(\"userExpDate\");\n//   dispatch({\n//     type: userActionTypes.LOGOUT,\n//   });\n// };\n\nexport const logoutStart = () => ({\n  type: userActionTypes.LOGOUT_START,\n});\n\nexport const logoutSuccess = () => ({\n  type: userActionTypes.LOGOUT_SUCCESS,\n});\n\nexport const checkExpirationTime = () => ({\n  type: userActionTypes.CHECK_EXPIRATION_TIME,\n});\n// export const checkAuthTimeout = (expirationTime) => (dispatch) => {\n//   setTimeout(() => {\n//     dispatch(logout());\n//   }, expirationTime * 1000);\n// };\n\n// export const register = (formData) => (dispatch) => {\n//   return new Promise(async (resolve, reject) => {\n//     try {\n//       console.log(formData);\n//       dispatch(registerStart());\n//       const {\n//         data: { token, user },\n//       } = await axios.post(\"/staff/register\", formData);\n//       localStorage.setItem(\"token\", token);\n//       localStorage.setItem(\"expDate\", new Date(Date.now() + 60 * 60 * 1000));\n//       dispatch(registerSuccess(user));\n//       resolve(true);\n//     } catch (error) {\n//       dispatch(registerFail(error.message));\n//       reject(error);\n//     }\n//   });\n// };\n\n// export const loginStart = () => ({\n//   type: userActionTypes.LOGIN_START,\n// });\n\n// export const loginSuccess = (user) => ({\n//   type: userActionTypes.LOGIN_SUCCESS,\n//   payload: user,\n// });\n\n// export const loginFail = (err) => ({\n//   type: userActionTypes.LOGIN_FAIL,\n//   payload: err,\n// });\n\n// export const login = (email, password) => async (dispatch) => {\n//   try {\n//     dispatch(loginStart());\n//     console.log(email, password);\n//     const {\n//       data: { user, token },\n//     } = await axios.post(\"/auth/staff\", { email, password });\n//     localStorage.setItem(\"token\", token);\n//     localStorage.setItem(\"expDate\", new Date(Date.now() + 60 * 60 * 1000));\n//     dispatch(loginSuccess(user));\n//   } catch (error) {\n//     dispatch(loginFail(error));\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}