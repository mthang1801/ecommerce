{"ast":null,"code":"import { put, takeLatest, call, all } from \"redux-saga/effects\";\nimport { registerSuccess, registerFail, fetchUserSuccess, fetchUserStart, checkAuthTimeout } from \"./user.actions\";\nimport userActionTypes from \"./user.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils\";\nimport setAuthToken from \"../../utils/setAuthToken\";\n\nfunction* register({\n  payload: {\n    name,\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      data: {\n        token,\n        user,\n        expDate\n      }\n    } = yield axios.post(urls.REGISTER_URL, {\n      name,\n      email,\n      password\n    });\n    localStorage.setItem(\"userToken\", token);\n    localStorage.setItem(\"userExpDate\", new Date(Date.now() + expDate * 1000));\n    setAuthToken(token);\n    yield put(registerSuccess(user));\n    yield put(checkAuthTimeout(expDate));\n  } catch (error) {\n    yield put(registerFail(error.message));\n  }\n}\n\nfunction* fetchUser() {\n  try {\n    if (!localStorage.token || !localStorage.expDate) {\n      throw new Error(\"Authentication denied\");\n    }\n\n    if (!localStorage.expDate || Date.parse(localStorage.expDate) < Date.now()) {\n      localStorage.removeItem(\"userExpDate\");\n      localStorage.removeItem(\"userToken\");\n      throw new Error(\"Token has expired\");\n    }\n\n    setAuthToken(localStorage.token);\n    const {\n      data\n    } = yield axios.get(\"/auth/user\");\n    dispatch(fetchUserSuccess(data));\n  } catch (error) {\n    dispatch(fetchUserFail(error.message));\n  }\n}\n\nfunction* onRegister() {\n  yield takeLatest(userActionTypes.REGISTER_START, register);\n}\n\nexport default function* userSaga() {\n  yield all([call(onRegister)]);\n}","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/redux/user/user.saga.js"],"names":["put","takeLatest","call","all","registerSuccess","registerFail","fetchUserSuccess","fetchUserStart","checkAuthTimeout","userActionTypes","axios","urls","setAuthToken","register","payload","name","email","password","data","token","user","expDate","post","REGISTER_URL","localStorage","setItem","Date","now","error","message","fetchUser","Error","parse","removeItem","get","dispatch","fetchUserFail","onRegister","REGISTER_START","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SACEC,eADF,EAEEC,YAFF,EAGEC,gBAHF,EAIEC,cAJF,EAKEC,gBALF,QAMO,gBANP;AAOA,OAAOC,eAAP,MAA4B,cAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;;AACA,UAAUC,QAAV,CAAmB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf;AAAX,CAAnB,EAA2D;AACzD,MAAI;AACF,UAAM;AACJC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAF;AAASC,QAAAA,IAAT;AAAeC,QAAAA;AAAf;AADF,QAEF,MAAMX,KAAK,CAACY,IAAN,CAAWX,IAAI,CAACY,YAAhB,EAA8B;AAAER,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAA9B,CAFV;AAIAO,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCN,KAAlC;AACAK,IAAAA,YAAY,CAACC,OAAb,CAAqB,aAArB,EAAoC,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAaN,OAAO,GAAG,IAAhC,CAApC;AACAT,IAAAA,YAAY,CAACO,KAAD,CAAZ;AACA,UAAMnB,GAAG,CAACI,eAAe,CAACgB,IAAD,CAAhB,CAAT;AACA,UAAMpB,GAAG,CAACQ,gBAAgB,CAACa,OAAD,CAAjB,CAAT;AACD,GAVD,CAUE,OAAOO,KAAP,EAAc;AACd,UAAM5B,GAAG,CAACK,YAAY,CAACuB,KAAK,CAACC,OAAP,CAAb,CAAT;AACD;AACF;;AAED,UAAUC,SAAV,GAAsB;AACpB,MAAI;AACF,QAAI,CAACN,YAAY,CAACL,KAAd,IAAuB,CAACK,YAAY,CAACH,OAAzC,EAAkD;AAChD,YAAM,IAAIU,KAAJ,CAAU,uBAAV,CAAN;AACD;;AACD,QACE,CAACP,YAAY,CAACH,OAAd,IACAK,IAAI,CAACM,KAAL,CAAWR,YAAY,CAACH,OAAxB,IAAmCK,IAAI,CAACC,GAAL,EAFrC,EAGE;AACAH,MAAAA,YAAY,CAACS,UAAb,CAAwB,aAAxB;AACAT,MAAAA,YAAY,CAACS,UAAb,CAAwB,WAAxB;AACA,YAAM,IAAIF,KAAJ,CAAU,mBAAV,CAAN;AACD;;AACDnB,IAAAA,YAAY,CAACY,YAAY,CAACL,KAAd,CAAZ;AACA,UAAM;AAAED,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACwB,GAAN,CAAU,YAAV,CAAvB;AACAC,IAAAA,QAAQ,CAAC7B,gBAAgB,CAACY,IAAD,CAAjB,CAAR;AACD,GAfD,CAeE,OAAOU,KAAP,EAAc;AACdO,IAAAA,QAAQ,CAACC,aAAa,CAACR,KAAK,CAACC,OAAP,CAAd,CAAR;AACD;AACF;;AAED,UAAUQ,UAAV,GAAuB;AACrB,QAAMpC,UAAU,CAACQ,eAAe,CAAC6B,cAAjB,EAAiCzB,QAAjC,CAAhB;AACD;;AAED,eAAe,UAAU0B,QAAV,GAAqB;AAClC,QAAMpC,GAAG,CAAC,CAACD,IAAI,CAACmC,UAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { put, takeLatest, call, all } from \"redux-saga/effects\";\nimport {\n  registerSuccess,\n  registerFail,\n  fetchUserSuccess,\n  fetchUserStart,\n  checkAuthTimeout,\n} from \"./user.actions\";\nimport userActionTypes from \"./user.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils\";\nimport setAuthToken from \"../../utils/setAuthToken\";\nfunction* register({ payload: { name, email, password } }) {\n  try {\n    const {\n      data: { token, user, expDate },\n    } = yield axios.post(urls.REGISTER_URL, { name, email, password });\n\n    localStorage.setItem(\"userToken\", token);\n    localStorage.setItem(\"userExpDate\", new Date(Date.now() + expDate * 1000));\n    setAuthToken(token);\n    yield put(registerSuccess(user));\n    yield put(checkAuthTimeout(expDate));\n  } catch (error) {\n    yield put(registerFail(error.message));\n  }\n}\n\nfunction* fetchUser() {\n  try {\n    if (!localStorage.token || !localStorage.expDate) {\n      throw new Error(\"Authentication denied\");\n    }\n    if (\n      !localStorage.expDate ||\n      Date.parse(localStorage.expDate) < Date.now()\n    ) {\n      localStorage.removeItem(\"userExpDate\");\n      localStorage.removeItem(\"userToken\");\n      throw new Error(\"Token has expired\");\n    }\n    setAuthToken(localStorage.token);\n    const { data } = yield axios.get(\"/auth/user\");\n    dispatch(fetchUserSuccess(data));\n  } catch (error) {\n    dispatch(fetchUserFail(error.message));\n  }\n}\n\nfunction* onRegister() {\n  yield takeLatest(userActionTypes.REGISTER_START, register);\n}\n\nexport default function* userSaga() {\n  yield all([call(onRegister)]);\n}\n"]},"metadata":{},"sourceType":"module"}