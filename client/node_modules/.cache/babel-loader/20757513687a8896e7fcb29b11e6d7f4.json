{"ast":null,"code":"import productTypeActionTypes from \"./product-type.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nexport const fetchProductTypeStart = () => ({\n  type: productTypeActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_START\n});\nexport const fetchProductTypeSuccess = ({\n  name,\n  productGroupList,\n  manufactorList,\n  discountProductList,\n  topRatedProducts,\n  bestSellerProducts,\n  productList,\n  numProducts,\n  currentPage,\n  numPages,\n  maxPrice\n}) => ({\n  type: productTypeActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_SUCCESS,\n  payload: {\n    name,\n    productGroupList,\n    manufactorList,\n    discountProductList,\n    topRatedProducts,\n    bestSellerProducts,\n    productList,\n    numProducts,\n    currentPage,\n    numPages,\n    maxPrice\n  }\n});\nexport const fetchProductTypeFail = err => ({\n  type: productTypeActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_FAIL,\n  payload: {\n    msg: err.response.data.message,\n    status: err.response.status\n  }\n});\nexport const fetchProductType = (categoryPath, productTypePath, page = 1) => async dispatch => {\n  try {\n    dispatch(fetchProductTypeStart());\n    let {\n      data\n    } = await axios.get(urls.GET_CONTENT_LIST_BY_PRODUCT_TYPE_URL(categoryPath, productTypePath, page));\n    data.currentPage = page;\n    dispatch(fetchProductTypeSuccess(data));\n  } catch (error) {\n    dispatch(fetchProductTypeFail(error));\n  }\n};\nexport const setCurrentPage = curPage => ({\n  type: productTypeActionTypes.SET_CURRENT_PAGE,\n  payload: curPage\n});\nexport const fetchProductListStart = () => ({\n  type: productTypeActionTypes.FETCH_PRODUCT_LIST_START\n});\nexport const fetchProductListSuccess = productList => ({\n  type: productTypeActionTypes.FETCH_PRODUCT_LIST_SUCCESS,\n  payload: productList\n});\nexport const fetchProductListFail = err => ({\n  type: productTypeActionTypes.FETCH_PRODUCT_LIST_FAIL,\n  payload: {\n    msg: err.response.data.message,\n    status: err.response.status\n  }\n});\nexport const fetchProductList = (categoryPath, productTypePath, page) => async (dispatch) => {\n  try {\n    dispatch(fetchProductListStart());\n    const {\n      data\n    } = await axios.get(urls.GET_PRODUCT_LIST_PER_PAGE_BY_PRODUCT_TYPE_PATH_URL(categoryPath, productTypePath, page));\n    dispatch(fetchProductListSuccess(data));\n  } catch (error) {\n    dispatch(fetchProductListFail(error));\n  }\n};\n\nconst filterProductsByPriceStart = () => ({\n  type: productTypeActionTypes.FILTER_PRODUCTS_BY_PRICE_START\n});\n\nconst filterProductsByPriceSuccess = (productList, numProducts, currentPage, numPages, maxPrice) => ({\n  type: productTypeActionTypes.FILTER_PRODUCTS_BY_PRICE_SUCCESS,\n  payload: {\n    productList,\n    numProducts,\n    currentPage,\n    numPages,\n    maxPrice\n  }\n});\n\nconst filterProductsByPriceFail = err => ({\n  type: productTypeActionTypes.FILTER_PRODUCTS_BY_PRICE_FAIL,\n  payload: {\n    msg: err.response.data.message,\n    status: err.response.data.status\n  }\n});\n\nexport const filterProductsByPrice = (categoryPath, productTypePath, minPrice, maxPrice, page = 1) => async dispatch => {\n  try {\n    dispatch(filterProductsByPriceStart());\n    const {\n      data: {\n        productList,\n        numProducts,\n        currentPage,\n        numPages,\n        maxPrice\n      }\n    } = await axios.get(urls.GET_PRODUCT_LIST_BY_FILTER_PRICE_IN_PRODUCT_TYPE(productList, numProducts, currentPage, numPages, maxPrice)); // dispatch(\n    //   filterProductsByPriceSuccess(\n    //     productList,\n    //     numProducts,\n    //     currentPage,\n    //     numPages,\n    //     maxPrice\n    //   )\n    // );\n  } catch (error) {// dispatch(filterProductsByPriceFail(error));\n  }\n};","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/redux/product-type/product-type.actions.js"],"names":["productTypeActionTypes","axios","urls","fetchProductTypeStart","type","FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_START","fetchProductTypeSuccess","name","productGroupList","manufactorList","discountProductList","topRatedProducts","bestSellerProducts","productList","numProducts","currentPage","numPages","maxPrice","FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_SUCCESS","payload","fetchProductTypeFail","err","FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_FAIL","msg","response","data","message","status","fetchProductType","categoryPath","productTypePath","page","dispatch","get","GET_CONTENT_LIST_BY_PRODUCT_TYPE_URL","error","setCurrentPage","curPage","SET_CURRENT_PAGE","fetchProductListStart","FETCH_PRODUCT_LIST_START","fetchProductListSuccess","FETCH_PRODUCT_LIST_SUCCESS","fetchProductListFail","FETCH_PRODUCT_LIST_FAIL","fetchProductList","GET_PRODUCT_LIST_PER_PAGE_BY_PRODUCT_TYPE_PATH_URL","filterProductsByPriceStart","FILTER_PRODUCTS_BY_PRICE_START","filterProductsByPriceSuccess","FILTER_PRODUCTS_BY_PRICE_SUCCESS","filterProductsByPriceFail","FILTER_PRODUCTS_BY_PRICE_FAIL","filterProductsByPrice","minPrice","GET_PRODUCT_LIST_BY_FILTER_PRICE_IN_PRODUCT_TYPE"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,sBAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AAC1CC,EAAAA,IAAI,EAAEJ,sBAAsB,CAACK;AADa,CAAP,CAA9B;AAGP,OAAO,MAAMC,uBAAuB,GAAG,CAAC;AACtCC,EAAAA,IADsC;AAEtCC,EAAAA,gBAFsC;AAGtCC,EAAAA,cAHsC;AAItCC,EAAAA,mBAJsC;AAKtCC,EAAAA,gBALsC;AAMtCC,EAAAA,kBANsC;AAOtCC,EAAAA,WAPsC;AAQtCC,EAAAA,WARsC;AAStCC,EAAAA,WATsC;AAUtCC,EAAAA,QAVsC;AAWtCC,EAAAA;AAXsC,CAAD,MAYhC;AACLb,EAAAA,IAAI,EAAEJ,sBAAsB,CAACkB,0CADxB;AAELC,EAAAA,OAAO,EAAE;AACPZ,IAAAA,IADO;AAEPC,IAAAA,gBAFO;AAGPC,IAAAA,cAHO;AAIPC,IAAAA,mBAJO;AAKPC,IAAAA,gBALO;AAMPC,IAAAA,kBANO;AAOPC,IAAAA,WAPO;AAQPC,IAAAA,WARO;AASPC,IAAAA,WATO;AAUPC,IAAAA,QAVO;AAWPC,IAAAA;AAXO;AAFJ,CAZgC,CAAhC;AA4BP,OAAO,MAAMG,oBAAoB,GAAIC,GAAD,KAAU;AAC5CjB,EAAAA,IAAI,EAAEJ,sBAAsB,CAACsB,uCADe;AAE5CH,EAAAA,OAAO,EAAE;AAAEI,IAAAA,GAAG,EAAEF,GAAG,CAACG,QAAJ,CAAaC,IAAb,CAAkBC,OAAzB;AAAkCC,IAAAA,MAAM,EAAEN,GAAG,CAACG,QAAJ,CAAaG;AAAvD;AAFmC,CAAV,CAA7B;AAKP,OAAO,MAAMC,gBAAgB,GAAG,CAC9BC,YAD8B,EAE9BC,eAF8B,EAG9BC,IAAI,GAAG,CAHuB,KAI3B,MAAOC,QAAP,IAAoB;AACvB,MAAI;AACFA,IAAAA,QAAQ,CAAC7B,qBAAqB,EAAtB,CAAR;AACA,QAAI;AAAEsB,MAAAA;AAAF,QAAW,MAAMxB,KAAK,CAACgC,GAAN,CACnB/B,IAAI,CAACgC,oCAAL,CACEL,YADF,EAEEC,eAFF,EAGEC,IAHF,CADmB,CAArB;AAOAN,IAAAA,IAAI,CAACV,WAAL,GAAmBgB,IAAnB;AACAC,IAAAA,QAAQ,CAAC1B,uBAAuB,CAACmB,IAAD,CAAxB,CAAR;AACD,GAXD,CAWE,OAAOU,KAAP,EAAc;AACdH,IAAAA,QAAQ,CAACZ,oBAAoB,CAACe,KAAD,CAArB,CAAR;AACD;AACF,CAnBM;AAqBP,OAAO,MAAMC,cAAc,GAAIC,OAAD,KAAc;AAC1CjC,EAAAA,IAAI,EAAEJ,sBAAsB,CAACsC,gBADa;AAE1CnB,EAAAA,OAAO,EAAEkB;AAFiC,CAAd,CAAvB;AAKP,OAAO,MAAME,qBAAqB,GAAG,OAAO;AAC1CnC,EAAAA,IAAI,EAAEJ,sBAAsB,CAACwC;AADa,CAAP,CAA9B;AAGP,OAAO,MAAMC,uBAAuB,GAAI5B,WAAD,KAAkB;AACvDT,EAAAA,IAAI,EAAEJ,sBAAsB,CAAC0C,0BAD0B;AAEvDvB,EAAAA,OAAO,EAAEN;AAF8C,CAAlB,CAAhC;AAIP,OAAO,MAAM8B,oBAAoB,GAAItB,GAAD,KAAU;AAC5CjB,EAAAA,IAAI,EAAEJ,sBAAsB,CAAC4C,uBADe;AAE5CzB,EAAAA,OAAO,EAAE;AAAEI,IAAAA,GAAG,EAAEF,GAAG,CAACG,QAAJ,CAAaC,IAAb,CAAkBC,OAAzB;AAAkCC,IAAAA,MAAM,EAAEN,GAAG,CAACG,QAAJ,CAAaG;AAAvD;AAFmC,CAAV,CAA7B;AAKP,OAAO,MAAMkB,gBAAgB,GAAG,CAAChB,YAAD,EAAeC,eAAf,EAAgCC,IAAhC,KAAyC,OACvEC,QADuE,KAEpE;AACH,MAAI;AACFA,IAAAA,QAAQ,CAACO,qBAAqB,EAAtB,CAAR;AACA,UAAM;AAAEd,MAAAA;AAAF,QAAW,MAAMxB,KAAK,CAACgC,GAAN,CACrB/B,IAAI,CAAC4C,kDAAL,CACEjB,YADF,EAEEC,eAFF,EAGEC,IAHF,CADqB,CAAvB;AAOAC,IAAAA,QAAQ,CAACS,uBAAuB,CAAChB,IAAD,CAAxB,CAAR;AACD,GAVD,CAUE,OAAOU,KAAP,EAAc;AACdH,IAAAA,QAAQ,CAACW,oBAAoB,CAACR,KAAD,CAArB,CAAR;AACD;AACF,CAhBM;;AAiBP,MAAMY,0BAA0B,GAAG,OAAO;AACxC3C,EAAAA,IAAI,EAAEJ,sBAAsB,CAACgD;AADW,CAAP,CAAnC;;AAGA,MAAMC,4BAA4B,GAAG,CACnCpC,WADmC,EAEnCC,WAFmC,EAGnCC,WAHmC,EAInCC,QAJmC,EAKnCC,QALmC,MAM/B;AACJb,EAAAA,IAAI,EAAEJ,sBAAsB,CAACkD,gCADzB;AAEJ/B,EAAAA,OAAO,EAAE;AAAEN,IAAAA,WAAF;AAAeC,IAAAA,WAAf;AAA4BC,IAAAA,WAA5B;AAAyCC,IAAAA,QAAzC;AAAmDC,IAAAA;AAAnD;AAFL,CAN+B,CAArC;;AAUA,MAAMkC,yBAAyB,GAAI9B,GAAD,KAAU;AAC1CjB,EAAAA,IAAI,EAAEJ,sBAAsB,CAACoD,6BADa;AAE1CjC,EAAAA,OAAO,EAAE;AAAEI,IAAAA,GAAG,EAAEF,GAAG,CAACG,QAAJ,CAAaC,IAAb,CAAkBC,OAAzB;AAAkCC,IAAAA,MAAM,EAAEN,GAAG,CAACG,QAAJ,CAAaC,IAAb,CAAkBE;AAA5D;AAFiC,CAAV,CAAlC;;AAKA,OAAO,MAAM0B,qBAAqB,GAAG,CACnCxB,YADmC,EAEnCC,eAFmC,EAGnCwB,QAHmC,EAInCrC,QAJmC,EAKnCc,IAAI,GAAG,CAL4B,KAMhC,MAAOC,QAAP,IAAoB;AACvB,MAAI;AACFA,IAAAA,QAAQ,CAACe,0BAA0B,EAA3B,CAAR;AACA,UAAM;AACJtB,MAAAA,IAAI,EAAE;AAAEZ,QAAAA,WAAF;AAAeC,QAAAA,WAAf;AAA4BC,QAAAA,WAA5B;AAAyCC,QAAAA,QAAzC;AAAmDC,QAAAA;AAAnD;AADF,QAEF,MAAMhB,KAAK,CAACgC,GAAN,CACR/B,IAAI,CAACqD,gDAAL,CACE1C,WADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,QAJF,EAKEC,QALF,CADQ,CAFV,CAFE,CAaF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAtBD,CAsBE,OAAOkB,KAAP,EAAc,CACd;AACD;AACF,CAhCM","sourcesContent":["import productTypeActionTypes from \"./product-type.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nexport const fetchProductTypeStart = () => ({\n  type: productTypeActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_START,\n});\nexport const fetchProductTypeSuccess = ({\n  name,\n  productGroupList,\n  manufactorList,\n  discountProductList,\n  topRatedProducts,\n  bestSellerProducts,\n  productList,\n  numProducts,\n  currentPage,\n  numPages,\n  maxPrice,\n}) => ({\n  type: productTypeActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_SUCCESS,\n  payload: {\n    name,\n    productGroupList,\n    manufactorList,\n    discountProductList,\n    topRatedProducts,\n    bestSellerProducts,\n    productList,\n    numProducts,\n    currentPage,\n    numPages,\n    maxPrice,\n  },\n});\nexport const fetchProductTypeFail = (err) => ({\n  type: productTypeActionTypes.FETCH_CONTENT_LIST_BY_PRODUCT_TYPE_FAIL,\n  payload: { msg: err.response.data.message, status: err.response.status },\n});\n\nexport const fetchProductType = (\n  categoryPath,\n  productTypePath,\n  page = 1\n) => async (dispatch) => {\n  try {\n    dispatch(fetchProductTypeStart());\n    let { data } = await axios.get(\n      urls.GET_CONTENT_LIST_BY_PRODUCT_TYPE_URL(\n        categoryPath,\n        productTypePath,\n        page\n      )\n    );\n    data.currentPage = page;\n    dispatch(fetchProductTypeSuccess(data));\n  } catch (error) {\n    dispatch(fetchProductTypeFail(error));\n  }\n};\n\nexport const setCurrentPage = (curPage) => ({\n  type: productTypeActionTypes.SET_CURRENT_PAGE,\n  payload: curPage,\n});\n\nexport const fetchProductListStart = () => ({\n  type: productTypeActionTypes.FETCH_PRODUCT_LIST_START,\n});\nexport const fetchProductListSuccess = (productList) => ({\n  type: productTypeActionTypes.FETCH_PRODUCT_LIST_SUCCESS,\n  payload: productList,\n});\nexport const fetchProductListFail = (err) => ({\n  type: productTypeActionTypes.FETCH_PRODUCT_LIST_FAIL,\n  payload: { msg: err.response.data.message, status: err.response.status },\n});\n\nexport const fetchProductList = (categoryPath, productTypePath, page) => async (\n  dispatch\n) => {\n  try {\n    dispatch(fetchProductListStart());\n    const { data } = await axios.get(\n      urls.GET_PRODUCT_LIST_PER_PAGE_BY_PRODUCT_TYPE_PATH_URL(\n        categoryPath,\n        productTypePath,\n        page\n      )\n    );\n    dispatch(fetchProductListSuccess(data));\n  } catch (error) {\n    dispatch(fetchProductListFail(error));\n  }\n};\nconst filterProductsByPriceStart = () => ({\n  type: productTypeActionTypes.FILTER_PRODUCTS_BY_PRICE_START,\n});\nconst filterProductsByPriceSuccess = (\n  productList,\n  numProducts,\n  currentPage,\n  numPages,\n  maxPrice\n) => ({\n  type: productTypeActionTypes.FILTER_PRODUCTS_BY_PRICE_SUCCESS,\n  payload: { productList, numProducts, currentPage, numPages, maxPrice },\n});\nconst filterProductsByPriceFail = (err) => ({\n  type: productTypeActionTypes.FILTER_PRODUCTS_BY_PRICE_FAIL,\n  payload: { msg: err.response.data.message, status: err.response.data.status },\n});\n\nexport const filterProductsByPrice = (\n  categoryPath,\n  productTypePath,\n  minPrice,\n  maxPrice,\n  page = 1\n) => async (dispatch) => {\n  try {\n    dispatch(filterProductsByPriceStart());\n    const {\n      data: { productList, numProducts, currentPage, numPages, maxPrice },\n    } = await axios.get(\n      urls.GET_PRODUCT_LIST_BY_FILTER_PRICE_IN_PRODUCT_TYPE(\n        productList,\n        numProducts,\n        currentPage,\n        numPages,\n        maxPrice\n      )\n    );\n    // dispatch(\n    //   filterProductsByPriceSuccess(\n    //     productList,\n    //     numProducts,\n    //     currentPage,\n    //     numPages,\n    //     maxPrice\n    //   )\n    // );\n  } catch (error) {\n    // dispatch(filterProductsByPriceFail(error));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}