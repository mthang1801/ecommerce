{"ast":null,"code":"import { put, takeLatest, call, all } from \"redux-saga/effects\";\nimport { registerSuccess, registerFail } from \"./user.actions\";\nimport userActionTypes from \"./user.types\";\n\nfunction* register({\n  payload: {\n    name,\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      data: {\n        token,\n        user\n      }\n    } = yield axios.post(\"/user/register\", {\n      name,\n      email,\n      password\n    });\n    console.log(token, user);\n    localStorage.setItem(\"userToken\", token);\n    localStorage.setItem(\"expDate\", new Date(Date.now() + 60 * 60 * 1000));\n    yield put(registerSuccess(user));\n  } catch (error) {\n    yield put(registerFail(error.message));\n  }\n}\n\nfunction* onRegister() {\n  yield takeLatest(userActionTypes.REGISTER_START, register);\n}\n\nexport default function* userSaga() {\n  yield all([call(onRegister)]);\n}","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/redux/user/user.saga.js"],"names":["put","takeLatest","call","all","registerSuccess","registerFail","userActionTypes","register","payload","name","email","password","data","token","user","axios","post","console","log","localStorage","setItem","Date","now","error","message","onRegister","REGISTER_START","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,gBAA9C;AACA,OAAOC,eAAP,MAA4B,cAA5B;;AACA,UAAUC,QAAV,CAAmB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf;AAAX,CAAnB,EAA2D;AACzD,MAAI;AACF,UAAM;AACJC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT;AADF,QAEF,MAAMC,KAAK,CAACC,IAAN,CAAW,gBAAX,EAA6B;AAAEP,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAA7B,CAFV;AAGAM,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ,EAAmBC,IAAnB;AACAK,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCP,KAAlC;AACAM,IAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgC,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAa,KAAK,EAAL,GAAU,IAAhC,CAAhC;AACA,UAAMtB,GAAG,CAACI,eAAe,CAACU,IAAD,CAAhB,CAAT;AACD,GARD,CAQE,OAAOS,KAAP,EAAc;AACd,UAAMvB,GAAG,CAACK,YAAY,CAACkB,KAAK,CAACC,OAAP,CAAb,CAAT;AACD;AACF;;AAED,UAAUC,UAAV,GAAuB;AACrB,QAAMxB,UAAU,CAACK,eAAe,CAACoB,cAAjB,EAAiCnB,QAAjC,CAAhB;AACD;;AAED,eAAe,UAAUoB,QAAV,GAAqB;AAClC,QAAMxB,GAAG,CAAC,CAACD,IAAI,CAACuB,UAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { put, takeLatest, call, all } from \"redux-saga/effects\";\nimport { registerSuccess, registerFail } from \"./user.actions\";\nimport userActionTypes from \"./user.types\";\nfunction* register({ payload: { name, email, password } }) {\n  try {\n    const {\n      data: { token, user },\n    } = yield axios.post(\"/user/register\", { name, email, password });\n    console.log(token, user);\n    localStorage.setItem(\"userToken\", token);\n    localStorage.setItem(\"expDate\", new Date(Date.now() + 60 * 60 * 1000));\n    yield put(registerSuccess(user));\n  } catch (error) {\n    yield put(registerFail(error.message));\n  }\n}\n\nfunction* onRegister() {\n  yield takeLatest(userActionTypes.REGISTER_START, register);\n}\n\nexport default function* userSaga() {\n  yield all([call(onRegister)]);\n}\n"]},"metadata":{},"sourceType":"module"}