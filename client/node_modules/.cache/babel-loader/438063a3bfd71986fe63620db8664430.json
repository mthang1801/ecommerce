{"ast":null,"code":"import userActionTypes from \"./user.types\";\nexport const fetchUserStart = () => ({\n  type: userActionTypes.FETCH_USER_START\n});\nexport const fetchUserSuccess = user => ({\n  type: userActionTypes.FETCH_USER_SUCCESS,\n  payload: user\n});\nexport const fetchUserFail = () => ({\n  type: userActionTypes.FETCH_USER_FAIL\n});\nexport const registerStart = (name, email, password) => ({\n  type: userActionTypes.REGISTER_START,\n  payload: {\n    name,\n    email,\n    password\n  }\n});\nexport const registerSuccess = user => ({\n  type: userActionTypes.REGISTER_SUCCESS,\n  payload: user\n});\nexport const registerFail = err => ({\n  type: userActionTypes.REGISTER_FAIL,\n  payload: err\n});\nexport const logoutStart = () => ({\n  type: userActionTypes.LOGOUT_START\n});\nexport const logoutSuccess = () => ({\n  type: userActionTypes.LOGOUT_SUCCESS\n});\nexport const checkAuthTimeout = timeout => ({\n  type: userActionTypes.CHECK_AUTH_TIMEOUT,\n  payload: timeout\n});\nexport const loginStart = (email, password) => ({\n  type: userActionTypes.LOGIN_START,\n  payload: {\n    email,\n    password\n  }\n});\nexport const loginSuccess = user => ({\n  type: userActionTypes.LOGIN_SUCCESS,\n  payload: user\n});\nexport const loginFail = err => ({\n  type: userActionTypes.LOGIN_FAIL,\n  payload: err\n}); // export const login = (email, password) => async (dispatch) => {\n//   try {\n//     dispatch(loginStart());\n//     console.log(email, password);\n//     const {\n//       data: { user, token },\n//     } = await axios.post(\"/auth/staff\", { email, password });\n//     localStorage.setItem(\"token\", token);\n//     localStorage.setItem(\"expDate\", new Date(Date.now() + 60 * 60 * 1000));\n//     dispatch(loginSuccess(user));\n//   } catch (error) {\n//     dispatch(loginFail(error));\n//   }\n// };","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/redux/user/user.actions.js"],"names":["userActionTypes","fetchUserStart","type","FETCH_USER_START","fetchUserSuccess","user","FETCH_USER_SUCCESS","payload","fetchUserFail","FETCH_USER_FAIL","registerStart","name","email","password","REGISTER_START","registerSuccess","REGISTER_SUCCESS","registerFail","err","REGISTER_FAIL","logoutStart","LOGOUT_START","logoutSuccess","LOGOUT_SUCCESS","checkAuthTimeout","timeout","CHECK_AUTH_TIMEOUT","loginStart","LOGIN_START","loginSuccess","LOGIN_SUCCESS","loginFail","LOGIN_FAIL"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAEA,OAAO,MAAMC,cAAc,GAAG,OAAO;AACnCC,EAAAA,IAAI,EAAEF,eAAe,CAACG;AADa,CAAP,CAAvB;AAGP,OAAO,MAAMC,gBAAgB,GAAIC,IAAD,KAAW;AACzCH,EAAAA,IAAI,EAAEF,eAAe,CAACM,kBADmB;AAEzCC,EAAAA,OAAO,EAAEF;AAFgC,CAAX,CAAzB;AAIP,OAAO,MAAMG,aAAa,GAAG,OAAO;AAClCN,EAAAA,IAAI,EAAEF,eAAe,CAACS;AADY,CAAP,CAAtB;AAIP,OAAO,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,MAA4B;AACvDX,EAAAA,IAAI,EAAEF,eAAe,CAACc,cADiC;AAEvDP,EAAAA,OAAO,EAAE;AAAEI,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf;AAF8C,CAA5B,CAAtB;AAKP,OAAO,MAAME,eAAe,GAAIV,IAAD,KAAW;AACxCH,EAAAA,IAAI,EAAEF,eAAe,CAACgB,gBADkB;AAExCT,EAAAA,OAAO,EAAEF;AAF+B,CAAX,CAAxB;AAKP,OAAO,MAAMY,YAAY,GAAIC,GAAD,KAAU;AACpChB,EAAAA,IAAI,EAAEF,eAAe,CAACmB,aADc;AAEpCZ,EAAAA,OAAO,EAAEW;AAF2B,CAAV,CAArB;AAKP,OAAO,MAAME,WAAW,GAAG,OAAO;AAChClB,EAAAA,IAAI,EAAEF,eAAe,CAACqB;AADU,CAAP,CAApB;AAIP,OAAO,MAAMC,aAAa,GAAG,OAAO;AAClCpB,EAAAA,IAAI,EAAEF,eAAe,CAACuB;AADY,CAAP,CAAtB;AAIP,OAAO,MAAMC,gBAAgB,GAAIC,OAAD,KAAc;AAC5CvB,EAAAA,IAAI,EAAEF,eAAe,CAAC0B,kBADsB;AAE5CnB,EAAAA,OAAO,EAAEkB;AAFmC,CAAd,CAAzB;AAKP,OAAO,MAAME,UAAU,GAAG,CAACf,KAAD,EAAQC,QAAR,MAAsB;AAC9CX,EAAAA,IAAI,EAAEF,eAAe,CAAC4B,WADwB;AAE9CrB,EAAAA,OAAO,EAAE;AAAEK,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAFqC,CAAtB,CAAnB;AAKP,OAAO,MAAMgB,YAAY,GAAIxB,IAAD,KAAW;AACrCH,EAAAA,IAAI,EAAEF,eAAe,CAAC8B,aADe;AAErCvB,EAAAA,OAAO,EAAEF;AAF4B,CAAX,CAArB;AAKP,OAAO,MAAM0B,SAAS,GAAIb,GAAD,KAAU;AACjChB,EAAAA,IAAI,EAAEF,eAAe,CAACgC,UADW;AAEjCzB,EAAAA,OAAO,EAAEW;AAFwB,CAAV,CAAlB,C,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import userActionTypes from \"./user.types\";\n\nexport const fetchUserStart = () => ({\n  type: userActionTypes.FETCH_USER_START,\n});\nexport const fetchUserSuccess = (user) => ({\n  type: userActionTypes.FETCH_USER_SUCCESS,\n  payload: user,\n});\nexport const fetchUserFail = () => ({\n  type: userActionTypes.FETCH_USER_FAIL,\n});\n\nexport const registerStart = (name, email, password) => ({\n  type: userActionTypes.REGISTER_START,\n  payload: { name, email, password },\n});\n\nexport const registerSuccess = (user) => ({\n  type: userActionTypes.REGISTER_SUCCESS,\n  payload: user,\n});\n\nexport const registerFail = (err) => ({\n  type: userActionTypes.REGISTER_FAIL,\n  payload: err,\n});\n\nexport const logoutStart = () => ({\n  type: userActionTypes.LOGOUT_START,\n});\n\nexport const logoutSuccess = () => ({\n  type: userActionTypes.LOGOUT_SUCCESS,\n});\n\nexport const checkAuthTimeout = (timeout) => ({\n  type: userActionTypes.CHECK_AUTH_TIMEOUT,\n  payload: timeout,\n});\n\nexport const loginStart = (email, password) => ({\n  type: userActionTypes.LOGIN_START,\n  payload: { email, password },\n});\n\nexport const loginSuccess = (user) => ({\n  type: userActionTypes.LOGIN_SUCCESS,\n  payload: user,\n});\n\nexport const loginFail = (err) => ({\n  type: userActionTypes.LOGIN_FAIL,\n  payload: err,\n});\n\n// export const login = (email, password) => async (dispatch) => {\n//   try {\n//     dispatch(loginStart());\n//     console.log(email, password);\n//     const {\n//       data: { user, token },\n//     } = await axios.post(\"/auth/staff\", { email, password });\n//     localStorage.setItem(\"token\", token);\n//     localStorage.setItem(\"expDate\", new Date(Date.now() + 60 * 60 * 1000));\n//     dispatch(loginSuccess(user));\n//   } catch (error) {\n//     dispatch(loginFail(error));\n//   }\n// };\n"]},"metadata":{},"sourceType":"module"}