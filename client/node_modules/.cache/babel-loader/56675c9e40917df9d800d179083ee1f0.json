{"ast":null,"code":"import productCommentReviewActionTypes from \"./product-comment-review.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nimport commentReviewsItemComponent from \"../../components/Product-Detail/comment-reviews-item/comment-reviews-item.component\";\n\nconst fetchProductCommentReviewStart = () => ({\n  type: productCommentReviewActionTypes.FETCH_PRODUCT_COMMENT_REVIEW_START\n});\n\nconst fetchProductCommentReviewSuccess = (comments, response, numberOfComments) => {\n  return {\n    type: productCommentReviewActionTypes.FETCH_PRODUCT_COMMENT_REVIEW_SUCCESS,\n    payload: {\n      comments,\n      responses,\n      numberOfComments\n    }\n  };\n};\n\nconst fetchProductCommentReviewFail = err => ({\n  type: productCommentReviewActionTypes.FETCH_PRODUCT_COMMENT_REVIEW_FAIL,\n  payload: {\n    msg: err.response.data.message,\n    status: err.response.status\n  }\n});\n\nexport const fetchProductCommentReview = productId => async dispatch => {\n  try {\n    dispatch(fetchProductCommentReviewStart());\n    const {\n      data: {\n        comments,\n        numberOfComments\n      }\n    } = await axios.get(urls.GET_PRODUCT_COMMENT_REVIEWS(productId));\n    dispatch(fetchProductCommentReviewSuccess(comments, numberOfComments));\n  } catch (error) {\n    dispatch(fetchProductCommentReviewFail(error));\n  }\n};\nexport const setLikeForComment = (commentId, userId) => ({\n  type: productCommentReviewActionTypes.SET_LIKE_FOR_COMMENT,\n  payload: {\n    commentId,\n    userId\n  }\n});\nexport const setUnlikeForComment = (commentId, userId) => ({\n  type: productCommentReviewActionTypes.SET_UNLIKE_FOR_COMMENT,\n  payload: {\n    commentId,\n    userId\n  }\n});\nexport const postLikeOrUnlikeComment = (commentId, userId) => async (dispatch) => {\n  try {\n    const {\n      data\n    } = await axios.post(urls.POST_LIKE_OR_UNLIKE_COMMENT(commentId));\n    console.log(data);\n\n    if (data.msg == \"like success\") {\n      dispatch(setLikeForComment(commentId, userId));\n    } else {\n      dispatch(setUnlikeForComment(commentId, userId));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const setDislikeForComment = (commentId, userId) => ({\n  type: productCommentReviewActionTypes.SET_DISLIKE_FOR_COMMENT,\n  payload: {\n    commentId,\n    userId\n  }\n});\nexport const setUndislikeForComment = (commentId, userId) => ({\n  type: productCommentReviewActionTypes.SET_UNDISLIKE_FOR_COMMENT,\n  payload: {\n    commentId,\n    userId\n  }\n});\nexport const postDislikeOrUndislikeComment = (commentId, userId) => async (dispatch) => {\n  try {\n    const {\n      data\n    } = await axios.post(urls.POST_DISLIKE_OR_UNDISLIKE_COMMENT(commentId));\n\n    if (data.msg == \"dislike success\") {\n      dispatch(setDislikeForComment(commentId, userId));\n    } else {\n      dispatch(setUndislikeForComment(commentId, userId));\n    }\n  } catch (error) {\n    console.log(error.response.data.message);\n  }\n};\nexport const setResponseComment = (commentId, response) => ({\n  type: productCommentReviewActionTypes.SET_RESPONSE_COMMENT,\n  payload: {\n    commentId,\n    response\n  }\n});\nexport const postResponseComment = (commentId, text) => async dispatch => {\n  try {\n    console.log(commentId, text);\n    const {\n      data\n    } = await axios.post(urls.POST_RESPONSE_COMMENT(commentId), {\n      text\n    });\n    dispatch(setResponseComment(commentId, data));\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const setLikeForResponseComment = (commentId, responseId, userId) => ({\n  type: productCommentReviewActionTypes.SET_LIKE_FOR_RESPONSE_COMMENT,\n  payload: {\n    commentId,\n    responseId,\n    userId\n  }\n});\nexport const setUnlikeForResponseComment = (commentId, responseId, userId) => ({\n  type: productCommentReviewActionTypes.SET_UNLIKE_FOR_RESPONSE_COMMENT,\n  payload: {\n    commentId,\n    responseId,\n    userId\n  }\n});\nexport const postLikeOrUnlikeResponseComment = (commentId, responseId, userId) => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.post(urls.POST_LIKE_OR_UNLIKE_RESPONSE_COMMENT(responseId));\n\n    if (data.msg === \"like success\") {\n      dispatch(setLikeForResponseComment(commentId, responseId, userId));\n    } else {\n      dispatch(setUnlikeForResponseComment(commentId, responseId, userId));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/redux/product-comment-review/product-comment-review.actions.js"],"names":["productCommentReviewActionTypes","axios","urls","commentReviewsItemComponent","fetchProductCommentReviewStart","type","FETCH_PRODUCT_COMMENT_REVIEW_START","fetchProductCommentReviewSuccess","comments","response","numberOfComments","FETCH_PRODUCT_COMMENT_REVIEW_SUCCESS","payload","responses","fetchProductCommentReviewFail","err","FETCH_PRODUCT_COMMENT_REVIEW_FAIL","msg","data","message","status","fetchProductCommentReview","productId","dispatch","get","GET_PRODUCT_COMMENT_REVIEWS","error","setLikeForComment","commentId","userId","SET_LIKE_FOR_COMMENT","setUnlikeForComment","SET_UNLIKE_FOR_COMMENT","postLikeOrUnlikeComment","post","POST_LIKE_OR_UNLIKE_COMMENT","console","log","setDislikeForComment","SET_DISLIKE_FOR_COMMENT","setUndislikeForComment","SET_UNDISLIKE_FOR_COMMENT","postDislikeOrUndislikeComment","POST_DISLIKE_OR_UNDISLIKE_COMMENT","setResponseComment","SET_RESPONSE_COMMENT","postResponseComment","text","POST_RESPONSE_COMMENT","setLikeForResponseComment","responseId","SET_LIKE_FOR_RESPONSE_COMMENT","setUnlikeForResponseComment","SET_UNLIKE_FOR_RESPONSE_COMMENT","postLikeOrUnlikeResponseComment","POST_LIKE_OR_UNLIKE_RESPONSE_COMMENT"],"mappings":"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","sourcesContent":["import productCommentReviewActionTypes from \"./product-comment-review.types\";\nimport axios from \"axios\";\nimport urls from \"../../utils/urls\";\nimport commentReviewsItemComponent from \"../../components/Product-Detail/comment-reviews-item/comment-reviews-item.component\";\nconst fetchProductCommentReviewStart = () => ({\n  type: productCommentReviewActionTypes.FETCH_PRODUCT_COMMENT_REVIEW_START,\n});\n\nconst fetchProductCommentReviewSuccess = (\n  comments,\n  response,\n  numberOfComments\n) => {\n  return {\n    type: productCommentReviewActionTypes.FETCH_PRODUCT_COMMENT_REVIEW_SUCCESS,\n    payload: {\n      comments,\n      responses,\n      numberOfComments,\n    },\n  };\n};\n\nconst fetchProductCommentReviewFail = (err) => ({\n  type: productCommentReviewActionTypes.FETCH_PRODUCT_COMMENT_REVIEW_FAIL,\n  payload: { msg: err.response.data.message, status: err.response.status },\n});\n\nexport const fetchProductCommentReview = (productId) => async (dispatch) => {\n  try {\n    dispatch(fetchProductCommentReviewStart());\n    const {\n      data: { comments, numberOfComments },\n    } = await axios.get(urls.GET_PRODUCT_COMMENT_REVIEWS(productId));\n\n    dispatch(fetchProductCommentReviewSuccess(comments, numberOfComments));\n  } catch (error) {\n    dispatch(fetchProductCommentReviewFail(error));\n  }\n};\n\nexport const setLikeForComment = (commentId, userId) => ({\n  type: productCommentReviewActionTypes.SET_LIKE_FOR_COMMENT,\n  payload: { commentId, userId },\n});\n\nexport const setUnlikeForComment = (commentId, userId) => ({\n  type: productCommentReviewActionTypes.SET_UNLIKE_FOR_COMMENT,\n  payload: { commentId, userId },\n});\nexport const postLikeOrUnlikeComment = (commentId, userId) => async (\n  dispatch\n) => {\n  try {\n    const { data } = await axios.post(\n      urls.POST_LIKE_OR_UNLIKE_COMMENT(commentId)\n    );\n    console.log(data);\n    if (data.msg == \"like success\") {\n      dispatch(setLikeForComment(commentId, userId));\n    } else {\n      dispatch(setUnlikeForComment(commentId, userId));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const setDislikeForComment = (commentId, userId) => ({\n  type: productCommentReviewActionTypes.SET_DISLIKE_FOR_COMMENT,\n  payload: { commentId, userId },\n});\n\nexport const setUndislikeForComment = (commentId, userId) => ({\n  type: productCommentReviewActionTypes.SET_UNDISLIKE_FOR_COMMENT,\n  payload: { commentId, userId },\n});\nexport const postDislikeOrUndislikeComment = (commentId, userId) => async (\n  dispatch\n) => {\n  try {\n    const { data } = await axios.post(\n      urls.POST_DISLIKE_OR_UNDISLIKE_COMMENT(commentId)\n    );\n\n    if (data.msg == \"dislike success\") {\n      dispatch(setDislikeForComment(commentId, userId));\n    } else {\n      dispatch(setUndislikeForComment(commentId, userId));\n    }\n  } catch (error) {\n    console.log(error.response.data.message);\n  }\n};\n\nexport const setResponseComment = (commentId, response) => ({\n  type: productCommentReviewActionTypes.SET_RESPONSE_COMMENT,\n  payload: { commentId, response },\n});\n\nexport const postResponseComment = (commentId, text) => async (dispatch) => {\n  try {\n    console.log(commentId, text);\n    const { data } = await axios.post(urls.POST_RESPONSE_COMMENT(commentId), {\n      text,\n    });\n    dispatch(setResponseComment(commentId, data));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const setLikeForResponseComment = (commentId, responseId, userId) => ({\n  type: productCommentReviewActionTypes.SET_LIKE_FOR_RESPONSE_COMMENT,\n  payload: { commentId, responseId, userId },\n});\n\nexport const setUnlikeForResponseComment = (commentId, responseId, userId) => ({\n  type: productCommentReviewActionTypes.SET_UNLIKE_FOR_RESPONSE_COMMENT,\n  payload: { commentId, responseId, userId },\n});\n\nexport const postLikeOrUnlikeResponseComment = (\n  commentId,\n  responseId,\n  userId\n) => async (dispatch) => {\n  try {\n    const { data } = await axios.post(\n      urls.POST_LIKE_OR_UNLIKE_RESPONSE_COMMENT(responseId)\n    );\n    if (data.msg === \"like success\") {\n      dispatch(setLikeForResponseComment(commentId, responseId, userId));\n    } else {\n      dispatch(setUnlikeForResponseComment(commentId, responseId, userId));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}