{"ast":null,"code":"var _jsxFileName = \"/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/components/Auth/sign-up/sign-up.component.jsx\";\nimport React from \"react\";\nimport { CustomFormContainer, FormHeader, FormGroups, FormActions, StyledLink, Option, FlashForm, Title, SubTitle, ErrorMessage } from \"../../UI/custom-form/custom-form.styles\";\nimport CustomInput from \"../../UI/custom-input/custom-input.component\";\nimport CustomButton from \"../../UI/custom-button/custom-button.component\";\nimport { withRouter } from \"react-router-dom\";\nimport { FaGooglePlusG, FaFacebookF } from \"react-icons/fa\";\nimport { registerStart } from \"../../../redux/user/user.actions\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectUserError } from \"../../../redux/user/user.selectors\";\nimport GoogleRecaptcha from \"../../UI/google-recaptcha/google-recaptcha.component\";\nconst INITIAL_STATE = {\n  controls: {\n    name: {\n      type: \"text\",\n      name: \"name\",\n      valid: false,\n      label: \"Name\",\n      validation: {\n        required: true,\n        minLength: 3,\n        maxLength: 50\n      },\n      value: \"\",\n      touched: false,\n      validationErrors: \"\"\n    },\n    email: {\n      type: \"email\",\n      name: \"email\",\n      label: \"Email\",\n      valid: false,\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      value: \"\",\n      touched: false,\n      validationErrors: \"\"\n    },\n    password: {\n      type: \"password\",\n      name: \"password\",\n      valid: false,\n      label: \"Password\",\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      value: \"\",\n      touched: false,\n      validationErrors: \"\"\n    },\n    confirmPassword: {\n      type: \"password\",\n      name: \"confirmPassword\",\n      label: \"Confirm Password\",\n      valid: false,\n      validation: {\n        required: true,\n        minLength: 6,\n        match: true\n      },\n      value: \"\",\n      touched: false,\n      validationErrors: \"\"\n    }\n  },\n  formIsValid: false,\n  loaded: false,\n  disabled: true\n};\n\nclass SignUp extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = { ...INITIAL_STATE\n    };\n\n    this.checkValidity = (value, rules) => {\n      let isValid = true;\n      let errorsMessage = [];\n\n      if (rules.required) {\n        isValid = value.trim().length && isValid;\n\n        if (!isValid) {\n          errorsMessage.push(\"This field is required\");\n        }\n      }\n\n      if (rules.isEmail) {\n        const pattern = /^(([^<>()\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        isValid = pattern.test(value) && isValid;\n\n        if (!isValid) {\n          errorsMessage.push(\"Email is invalid\");\n        }\n      }\n\n      if (rules.minLength) {\n        isValid = value.trim().length >= rules.minLength && isValid;\n\n        if (!isValid) {\n          errorsMessage.push(`Invalid, at least ${rules.minLength} characters`);\n        }\n      }\n\n      if (rules.maxLength) {\n        isValid = value.trim().length <= rules.maxLength && isValid;\n\n        if (!isValid) {\n          errorsMessage.push(`Invalid, at most ${rules.maxLength} characters`);\n        }\n      }\n\n      if (rules.match) {\n        isValid = value.trim() === this.state.controls.password.value && isValid;\n\n        if (!isValid) {\n          errorsMessage.push(\"Password and confirm Password do not match\");\n        }\n      }\n\n      return errorsMessage;\n    };\n\n    this.handleChange = (e, name) => {\n      let updatedControls = { ...this.state.controls\n      };\n      let updatedControlElement = { ...updatedControls[name]\n      };\n      updatedControlElement.value = e.target.value;\n      const checkValid = this.checkValidity(e.target.value, updatedControlElement.validation);\n      updatedControlElement.valid = checkValid.length === 0;\n      updatedControlElement.touched = true;\n      updatedControlElement.validationErrors = checkValid;\n      updatedControls[name] = updatedControlElement;\n      let {\n        email,\n        password,\n        confirmPassword\n      } = updatedControls;\n      const formIsValid = email.valid && updatedControlElement.valid && password.valid && confirmPassword.valid;\n      this.setState({\n        controls: updatedControls,\n        formIsValid\n      });\n    };\n\n    this.handleSubmitSignUpForm = e => {\n      e.preventDefault();\n\n      if (!this.state.formIsValid) {\n        this.setState({ ...INITIAL_STATE\n        });\n        return;\n      }\n\n      const {\n        name,\n        email,\n        password\n      } = this.state.controls;\n      this.props.registerStart(name.value, email.value, password.value);\n    };\n\n    this.handleChangeGoogleRecaptcha = value => {\n      this.setState({\n        captcha_value: value,\n        disabled: false\n      });\n      if (value === null) this.setState({\n        disabled: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        loaded: true\n      });\n    }, 1000);\n  }\n\n  render() {\n    const {\n      formIsValid,\n      loaded,\n      disabled\n    } = this.state;\n    let formInputArray = [];\n    Object.keys(this.state.controls).map(controlItem => {\n      formInputArray.push(this.state.controls[controlItem]);\n    });\n    const {\n      error\n    } = this.props;\n    return /*#__PURE__*/React.createElement(CustomFormContainer, {\n      onSubmit: this.handleSubmitSignUpForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(FormHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    }, \"Sign Up\"), /*#__PURE__*/React.createElement(SubTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }, \"Sign up your account via email and password.\")), error && /*#__PURE__*/React.createElement(ErrorMessage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 19\n      }\n    }, error), /*#__PURE__*/React.createElement(FlashForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CustomButton, {\n      type: \"button\",\n      icon: /*#__PURE__*/React.createElement(FaGooglePlusG, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 19\n        }\n      }),\n      size: \"small\",\n      color: \"white\",\n      bgColor: \"#EA4335\",\n      variant: \"contained\",\n      onClick: () => {},\n      positionIcon: \"after\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    }, \"Sign In\"), /*#__PURE__*/React.createElement(CustomButton, {\n      type: \"button\",\n      icon: /*#__PURE__*/React.createElement(FaFacebookF, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 19\n        }\n      }),\n      size: \"small\",\n      color: \"white\",\n      bgColor: \"#4267B2\",\n      variant: \"contained\",\n      onClick: () => {},\n      positionIcon: \"after\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }\n    }, \"Sign In\")), /*#__PURE__*/React.createElement(FormGroups, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }\n    }, formInputArray.map(({\n      label,\n      name,\n      touched,\n      type,\n      valid,\n      validation,\n      validationErrors,\n      value\n    }) => /*#__PURE__*/React.createElement(CustomInput, {\n      key: name,\n      type: type,\n      name: name,\n      value: value,\n      label: label,\n      onChange: e => this.handleChange(e, name),\n      require: validation.required,\n      touched: touched,\n      valid: valid,\n      validationErrors: validationErrors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 15\n      }\n    })), loaded && /*#__PURE__*/React.createElement(GoogleRecaptcha, {\n      onChange: this.handleChangeGoogleRecaptcha,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 22\n      }\n    }), /*#__PURE__*/React.createElement(CustomButton, {\n      variant: \"outlined\",\n      size: \"small\",\n      color: \"#0d47a1\",\n      bgColor: \"blue\",\n      disabled: !formIsValid || disabled,\n      styled: {\n        marginTop: \"1rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 11\n      }\n    }, \"Submit\")), /*#__PURE__*/React.createElement(FormActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Option, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(StyledLink, {\n      to: \"/auth/signin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }\n    }, \"Signin account\")), /*#__PURE__*/React.createElement(Option, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 11\n      }\n    }, \"Forgot password ?\", \" \", /*#__PURE__*/React.createElement(StyledLink, {\n      to: \"/auth/restore-account\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }\n    }, \"Get Password Again.\"))));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  error: selectUserError\n});\n\nconst mapDispatchToProps = dispatch => ({\n  registerStart: (name, email, password) => dispatch(registerStart(name, email, password))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(SignUp));","map":{"version":3,"sources":["/home/mvt/Desktop/projects/mern-stack/e-commerce/client/src/components/Auth/sign-up/sign-up.component.jsx"],"names":["React","CustomFormContainer","FormHeader","FormGroups","FormActions","StyledLink","Option","FlashForm","Title","SubTitle","ErrorMessage","CustomInput","CustomButton","withRouter","FaGooglePlusG","FaFacebookF","registerStart","connect","createStructuredSelector","selectUserError","GoogleRecaptcha","INITIAL_STATE","controls","name","type","valid","label","validation","required","minLength","maxLength","value","touched","validationErrors","email","isEmail","password","confirmPassword","match","formIsValid","loaded","disabled","SignUp","Component","state","checkValidity","rules","isValid","errorsMessage","trim","length","push","pattern","test","handleChange","e","updatedControls","updatedControlElement","target","checkValid","setState","handleSubmitSignUpForm","preventDefault","props","handleChangeGoogleRecaptcha","captcha_value","componentDidMount","setTimeout","render","formInputArray","Object","keys","map","controlItem","error","marginTop","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,mBADF,EAEEC,UAFF,EAGEC,UAHF,EAIEC,WAJF,EAKEC,UALF,EAMEC,MANF,EAOEC,SAPF,EAQEC,KARF,EASEC,QATF,EAUEC,YAVF,QAWO,yCAXP;AAYA,OAAOC,WAAP,MAAwB,8CAAxB;AACA,OAAOC,YAAP,MAAyB,gDAAzB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,gBAA3C;AACA,SAAQC,aAAR,QAA4B,kCAA5B;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,wBAAR,QAAuC,UAAvC;AACA,SAAQC,eAAR,QAA8B,oCAA9B;AACA,OAAOC,eAAP,MAA4B,sDAA5B;AACA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE,MADF;AAEJD,MAAAA,IAAI,EAAE,MAFF;AAGJE,MAAAA,KAAK,EAAE,KAHH;AAIJC,MAAAA,KAAK,EAAE,MAJH;AAKJC,MAAAA,UAAU,EAAE;AACVC,QAAAA,QAAQ,EAAE,IADA;AAEVC,QAAAA,SAAS,EAAE,CAFD;AAGVC,QAAAA,SAAS,EAAE;AAHD,OALR;AAUJC,MAAAA,KAAK,EAAE,EAVH;AAWJC,MAAAA,OAAO,EAAE,KAXL;AAYJC,MAAAA,gBAAgB,EAAE;AAZd,KADE;AAeRC,IAAAA,KAAK,EAAE;AACLV,MAAAA,IAAI,EAAE,OADD;AAELD,MAAAA,IAAI,EAAE,OAFD;AAGLG,MAAAA,KAAK,EAAE,OAHF;AAILD,MAAAA,KAAK,EAAE,KAJF;AAKLE,MAAAA,UAAU,EAAE;AACVC,QAAAA,QAAQ,EAAE,IADA;AAEVO,QAAAA,OAAO,EAAE;AAFC,OALP;AASLJ,MAAAA,KAAK,EAAE,EATF;AAULC,MAAAA,OAAO,EAAE,KAVJ;AAWLC,MAAAA,gBAAgB,EAAE;AAXb,KAfC;AA4BRG,IAAAA,QAAQ,EAAE;AACRZ,MAAAA,IAAI,EAAE,UADE;AAERD,MAAAA,IAAI,EAAE,UAFE;AAGRE,MAAAA,KAAK,EAAE,KAHC;AAIRC,MAAAA,KAAK,EAAE,UAJC;AAKRC,MAAAA,UAAU,EAAE;AACVC,QAAAA,QAAQ,EAAE,IADA;AAEVC,QAAAA,SAAS,EAAE;AAFD,OALJ;AASRE,MAAAA,KAAK,EAAE,EATC;AAURC,MAAAA,OAAO,EAAE,KAVD;AAWRC,MAAAA,gBAAgB,EAAE;AAXV,KA5BF;AAyCRI,IAAAA,eAAe,EAAE;AACfb,MAAAA,IAAI,EAAE,UADS;AAEfD,MAAAA,IAAI,EAAE,iBAFS;AAGfG,MAAAA,KAAK,EAAE,kBAHQ;AAIfD,MAAAA,KAAK,EAAE,KAJQ;AAKfE,MAAAA,UAAU,EAAE;AACVC,QAAAA,QAAQ,EAAE,IADA;AAEVC,QAAAA,SAAS,EAAE,CAFD;AAGVS,QAAAA,KAAK,EAAE;AAHG,OALG;AAUfP,MAAAA,KAAK,EAAE,EAVQ;AAWfC,MAAAA,OAAO,EAAE,KAXM;AAYfC,MAAAA,gBAAgB,EAAE;AAZH;AAzCT,GADU;AAyDpBM,EAAAA,WAAW,EAAE,KAzDO;AA0DpBC,EAAAA,MAAM,EAAG,KA1DW;AA2DpBC,EAAAA,QAAQ,EAAG;AA3DS,CAAtB;;AA6DA,MAAMC,MAAN,SAAqB1C,KAAK,CAAC2C,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACnCC,KADmC,GAC3B,EAAE,GAAGvB;AAAL,KAD2B;;AAAA,SASnCwB,aATmC,GASnB,CAACd,KAAD,EAAQe,KAAR,KAAkB;AAChC,UAAIC,OAAO,GAAG,IAAd;AACA,UAAIC,aAAa,GAAG,EAApB;;AACA,UAAIF,KAAK,CAAClB,QAAV,EAAoB;AAClBmB,QAAAA,OAAO,GAAGhB,KAAK,CAACkB,IAAN,GAAaC,MAAb,IAAuBH,OAAjC;;AACA,YAAI,CAACA,OAAL,EAAc;AACZC,UAAAA,aAAa,CAACG,IAAd,CAAmB,wBAAnB;AACD;AACF;;AACD,UAAIL,KAAK,CAACX,OAAV,EAAmB;AACjB,cAAMiB,OAAO,GAAG,qJAAhB;AACAL,QAAAA,OAAO,GAAGK,OAAO,CAACC,IAAR,CAAatB,KAAb,KAAuBgB,OAAjC;;AACA,YAAI,CAACA,OAAL,EAAc;AACZC,UAAAA,aAAa,CAACG,IAAd,CAAmB,kBAAnB;AACD;AACF;;AACD,UAAIL,KAAK,CAACjB,SAAV,EAAqB;AACnBkB,QAAAA,OAAO,GAAGhB,KAAK,CAACkB,IAAN,GAAaC,MAAb,IAAuBJ,KAAK,CAACjB,SAA7B,IAA0CkB,OAApD;;AACA,YAAI,CAACA,OAAL,EAAc;AACZC,UAAAA,aAAa,CAACG,IAAd,CAAoB,qBAAoBL,KAAK,CAACjB,SAAU,aAAxD;AACD;AACF;;AACD,UAAIiB,KAAK,CAAChB,SAAV,EAAqB;AACnBiB,QAAAA,OAAO,GAAGhB,KAAK,CAACkB,IAAN,GAAaC,MAAb,IAAuBJ,KAAK,CAAChB,SAA7B,IAA0CiB,OAApD;;AACA,YAAI,CAACA,OAAL,EAAc;AACZC,UAAAA,aAAa,CAACG,IAAd,CAAoB,oBAAmBL,KAAK,CAAChB,SAAU,aAAvD;AACD;AACF;;AACD,UAAIgB,KAAK,CAACR,KAAV,EAAiB;AACfS,QAAAA,OAAO,GAAGhB,KAAK,CAACkB,IAAN,OAAiB,KAAKL,KAAL,CAAWtB,QAAX,CAAoBc,QAApB,CAA6BL,KAA9C,IAAuDgB,OAAjE;;AACA,YAAI,CAACA,OAAL,EAAc;AACZC,UAAAA,aAAa,CAACG,IAAd,CAAmB,4CAAnB;AACD;AACF;;AACD,aAAOH,aAAP;AACD,KA5CkC;;AAAA,SA8CnCM,YA9CmC,GA8CpB,CAACC,CAAD,EAAIhC,IAAJ,KAAa;AAC1B,UAAIiC,eAAe,GAAG,EAAE,GAAG,KAAKZ,KAAL,CAAWtB;AAAhB,OAAtB;AACA,UAAImC,qBAAqB,GAAG,EAAE,GAAGD,eAAe,CAACjC,IAAD;AAApB,OAA5B;AACAkC,MAAAA,qBAAqB,CAAC1B,KAAtB,GAA8BwB,CAAC,CAACG,MAAF,CAAS3B,KAAvC;AACA,YAAM4B,UAAU,GAAG,KAAKd,aAAL,CACjBU,CAAC,CAACG,MAAF,CAAS3B,KADQ,EAEjB0B,qBAAqB,CAAC9B,UAFL,CAAnB;AAIA8B,MAAAA,qBAAqB,CAAChC,KAAtB,GAA8BkC,UAAU,CAACT,MAAX,KAAsB,CAApD;AACAO,MAAAA,qBAAqB,CAACzB,OAAtB,GAAgC,IAAhC;AACAyB,MAAAA,qBAAqB,CAACxB,gBAAtB,GAAyC0B,UAAzC;AACAH,MAAAA,eAAe,CAACjC,IAAD,CAAf,GAAwBkC,qBAAxB;AACA,UAAI;AAAEvB,QAAAA,KAAF;AAASE,QAAAA,QAAT;AAAmBC,QAAAA;AAAnB,UAAuCmB,eAA3C;AACA,YAAMjB,WAAW,GACfL,KAAK,CAACT,KAAN,IACAgC,qBAAqB,CAAChC,KADtB,IAEAW,QAAQ,CAACX,KAFT,IAGAY,eAAe,CAACZ,KAJlB;AAKA,WAAKmC,QAAL,CAAc;AAAEtC,QAAAA,QAAQ,EAAEkC,eAAZ;AAA6BjB,QAAAA;AAA7B,OAAd;AACD,KAjEkC;;AAAA,SAmEnCsB,sBAnEmC,GAmETN,CAAD,IAAO;AAC9BA,MAAAA,CAAC,CAACO,cAAF;;AACA,UAAI,CAAC,KAAKlB,KAAL,CAAWL,WAAhB,EAA6B;AAC3B,aAAKqB,QAAL,CAAc,EAAE,GAAGvC;AAAL,SAAd;AACA;AACD;;AACD,YAAM;AAAEE,QAAAA,IAAF;AAAQW,QAAAA,KAAR;AAAeE,QAAAA;AAAf,UAA4B,KAAKQ,KAAL,CAAWtB,QAA7C;AAEA,WAAKyC,KAAL,CAAW/C,aAAX,CAAyBO,IAAI,CAACQ,KAA9B,EAAoCG,KAAK,CAACH,KAA1C,EAAiDK,QAAQ,CAACL,KAA1D;AACD,KA5EkC;;AAAA,SA8EnCiC,2BA9EmC,GA8ELjC,KAAK,IAAI;AACrC,WAAK6B,QAAL,CAAc;AAAEK,QAAAA,aAAa,EAAElC,KAAjB;AAAwBU,QAAAA,QAAQ,EAAE;AAAlC,OAAd;AACA,UAAIV,KAAK,KAAK,IAAd,EAAoB,KAAK6B,QAAL,CAAc;AAAEnB,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACrB,KAjFkC;AAAA;;AAGnCyB,EAAAA,iBAAiB,GAAE;AACjBC,IAAAA,UAAU,CAAC,MAAM;AACf,WAAKP,QAAL,CAAc;AAACpB,QAAAA,MAAM,EAAG;AAAV,OAAd;AACD,KAFS,EAER,IAFQ,CAAV;AAGD;;AA4ED4B,EAAAA,MAAM,GAAG;AACP,UAAM;AAAE7B,MAAAA,WAAF;AAAeC,MAAAA,MAAf;AAAwBC,MAAAA;AAAxB,QAAoC,KAAKG,KAA/C;AACA,QAAIyB,cAAc,GAAG,EAArB;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAY,KAAK3B,KAAL,CAAWtB,QAAvB,EAAiCkD,GAAjC,CAAsCC,WAAD,IAAiB;AACpDJ,MAAAA,cAAc,CAAClB,IAAf,CAAoB,KAAKP,KAAL,CAAWtB,QAAX,CAAoBmD,WAApB,CAApB;AACD,KAFD;AAGA,UAAM;AAACC,MAAAA;AAAD,QAAU,KAAKX,KAArB;AACA,wBACE,oBAAC,mBAAD;AAAqB,MAAA,QAAQ,EAAE,KAAKF,sBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAFF,CADF,EAOGa,KAAK,iBAAI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAeA,KAAf,CAPZ,eAQE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,YAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,IAAI,eAAE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFR;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,KAAK,EAAC,OAJR;AAKE,MAAA,OAAO,EAAC,SALV;AAME,MAAA,OAAO,EAAC,WANV;AAOE,MAAA,OAAO,EAAE,MAAM,CAAE,CAPnB;AAQE,MAAA,YAAY,EAAC,OARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAaE,oBAAC,YAAD;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,IAAI,eAAE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFR;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,KAAK,EAAC,OAJR;AAKE,MAAA,OAAO,EAAC,SALV;AAME,MAAA,OAAO,EAAC,WANV;AAOE,MAAA,OAAO,EAAE,MAAM,CAAE,CAPnB;AAQE,MAAA,YAAY,EAAC,OARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAbF,CARF,eAkCE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGL,cAAc,CAACG,GAAf,CACC,CAAC;AACC9C,MAAAA,KADD;AAECH,MAAAA,IAFD;AAGCS,MAAAA,OAHD;AAICR,MAAAA,IAJD;AAKCC,MAAAA,KALD;AAMCE,MAAAA,UAND;AAOCM,MAAAA,gBAPD;AAQCF,MAAAA;AARD,KAAD,kBAUE,oBAAC,WAAD;AACE,MAAA,GAAG,EAAER,IADP;AAEE,MAAA,IAAI,EAAEC,IAFR;AAGE,MAAA,IAAI,EAAED,IAHR;AAIE,MAAA,KAAK,EAAEQ,KAJT;AAKE,MAAA,KAAK,EAAEL,KALT;AAME,MAAA,QAAQ,EAAG6B,CAAD,IAAO,KAAKD,YAAL,CAAkBC,CAAlB,EAAqBhC,IAArB,CANnB;AAOE,MAAA,OAAO,EAAEI,UAAU,CAACC,QAPtB;AAQE,MAAA,OAAO,EAAEI,OARX;AASE,MAAA,KAAK,EAAEP,KATT;AAUE,MAAA,gBAAgB,EAAEQ,gBAVpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXH,CADH,EA0BGO,MAAM,iBAAI,oBAAC,eAAD;AAAiB,MAAA,QAAQ,EAAE,KAAKwB,2BAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1Bb,eA2BE,oBAAC,YAAD;AACE,MAAA,OAAO,EAAC,UADV;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,KAAK,EAAC,SAHR;AAIE,MAAA,OAAO,EAAC,MAJV;AAKE,MAAA,QAAQ,EAAE,CAACzB,WAAD,IAAgBE,QAL5B;AAME,MAAA,MAAM,EAAE;AAACkC,QAAAA,SAAS,EAAG;AAAb,OANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA3BF,CAlCF,eAwEE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAY,MAAA,EAAE,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADF,eAIE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACoB,GADpB,eAEE,oBAAC,UAAD;AAAY,MAAA,EAAE,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAFF,CAJF,CAxEF,CADF;AAsFD;;AAhLkC;;AAmLrC,MAAMC,eAAe,GAAG1D,wBAAwB,CAAC;AAC/CwD,EAAAA,KAAK,EAAGvD;AADuC,CAAD,CAAhD;;AAIA,MAAM0D,kBAAkB,GAAGC,QAAQ,KAAK;AACtC9D,EAAAA,aAAa,EAAG,CAACO,IAAD,EAAMW,KAAN,EAAYE,QAAZ,KAAyB0C,QAAQ,CAAC9D,aAAa,CAACO,IAAD,EAAMW,KAAN,EAAYE,QAAZ,CAAd;AADX,CAAL,CAAnC;;AAIA,eAAenB,OAAO,CAAC2D,eAAD,EAAkBC,kBAAlB,CAAP,CAA6ChE,UAAU,CAAC6B,MAAD,CAAvD,CAAf","sourcesContent":["import React from \"react\";\nimport {\n  CustomFormContainer,\n  FormHeader, \n  FormGroups,\n  FormActions,\n  StyledLink,\n  Option,\n  FlashForm,\n  Title,\n  SubTitle,\n  ErrorMessage\n} from \"../../UI/custom-form/custom-form.styles\";\nimport CustomInput from \"../../UI/custom-input/custom-input.component\";\nimport CustomButton from \"../../UI/custom-button/custom-button.component\";\nimport { withRouter } from \"react-router-dom\";\nimport { FaGooglePlusG, FaFacebookF } from \"react-icons/fa\";\nimport {registerStart} from \"../../../redux/user/user.actions\"\nimport {connect} from \"react-redux\";\nimport {createStructuredSelector} from \"reselect\";\nimport {selectUserError} from \"../../../redux/user/user.selectors\";\nimport GoogleRecaptcha from \"../../UI/google-recaptcha/google-recaptcha.component\";\nconst INITIAL_STATE = {\n  controls: {\n    name: {\n      type: \"text\",\n      name: \"name\",\n      valid: false,\n      label: \"Name\",\n      validation: {\n        required: true,\n        minLength: 3,\n        maxLength: 50,\n      },\n      value: \"\",\n      touched: false,\n      validationErrors: \"\",\n    },\n    email: {\n      type: \"email\",\n      name: \"email\",\n      label: \"Email\",\n      valid: false,\n      validation: {\n        required: true,\n        isEmail: true,\n      },\n      value: \"\",\n      touched: false,\n      validationErrors: \"\",\n    },\n    password: {\n      type: \"password\",\n      name: \"password\",\n      valid: false,\n      label: \"Password\",\n      validation: {\n        required: true,\n        minLength: 6,\n      },\n      value: \"\",\n      touched: false,\n      validationErrors: \"\",\n    },\n    confirmPassword: {\n      type: \"password\",\n      name: \"confirmPassword\",\n      label: \"Confirm Password\",\n      valid: false,\n      validation: {\n        required: true,\n        minLength: 6,\n        match: true,\n      },\n      value: \"\",\n      touched: false,\n      validationErrors: \"\",\n    },\n  },\n  formIsValid: false,\n  loaded : false ,\n  disabled : true \n};\nclass SignUp extends React.Component {\n  state = { ...INITIAL_STATE };\n\n  componentDidMount(){\n    setTimeout(() => {\n      this.setState({loaded : true})\n    },1000)\n  }\n\n  checkValidity = (value, rules) => {   \n    let isValid = true;\n    let errorsMessage = [];\n    if (rules.required) {\n      isValid = value.trim().length && isValid;\n      if (!isValid) {\n        errorsMessage.push(\"This field is required\");\n      }\n    }\n    if (rules.isEmail) {\n      const pattern = /^(([^<>()\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      isValid = pattern.test(value) && isValid;\n      if (!isValid) {\n        errorsMessage.push(\"Email is invalid\");\n      }\n    }\n    if (rules.minLength) {\n      isValid = value.trim().length >= rules.minLength && isValid;\n      if (!isValid) {\n        errorsMessage.push(`Invalid, at least ${rules.minLength} characters`);\n      }\n    }\n    if (rules.maxLength) {\n      isValid = value.trim().length <= rules.maxLength && isValid;\n      if (!isValid) {\n        errorsMessage.push(`Invalid, at most ${rules.maxLength} characters`);\n      }\n    }\n    if (rules.match) {\n      isValid = value.trim() === this.state.controls.password.value && isValid;\n      if (!isValid) {\n        errorsMessage.push(\"Password and confirm Password do not match\");\n      }\n    }\n    return errorsMessage;\n  };\n\n  handleChange = (e, name) => {\n    let updatedControls = { ...this.state.controls };\n    let updatedControlElement = { ...updatedControls[name] };\n    updatedControlElement.value = e.target.value;\n    const checkValid = this.checkValidity(\n      e.target.value,\n      updatedControlElement.validation\n    );\n    updatedControlElement.valid = checkValid.length === 0;\n    updatedControlElement.touched = true;\n    updatedControlElement.validationErrors = checkValid;\n    updatedControls[name] = updatedControlElement;\n    let { email, password, confirmPassword } = updatedControls;\n    const formIsValid =\n      email.valid &&\n      updatedControlElement.valid &&\n      password.valid &&\n      confirmPassword.valid;\n    this.setState({ controls: updatedControls, formIsValid });\n  };\n\n  handleSubmitSignUpForm = (e) => {\n    e.preventDefault();\n    if (!this.state.formIsValid) {\n      this.setState({ ...INITIAL_STATE });\n      return;\n    }\n    const { name, email, password } = this.state.controls;   \n    \n    this.props.registerStart(name.value,email.value, password.value);\n  };\n\n  handleChangeGoogleRecaptcha = value => {\n    this.setState({ captcha_value: value, disabled: false });\n    if (value === null) this.setState({ disabled: true });\n  }\n\n  render() {\n    const { formIsValid, loaded , disabled} = this.state;\n    let formInputArray = [];\n    Object.keys(this.state.controls).map((controlItem) => {\n      formInputArray.push(this.state.controls[controlItem]);\n    });\n    const {error} = this.props\n    return (\n      <CustomFormContainer onSubmit={this.handleSubmitSignUpForm}>\n        <FormHeader>\n          <Title>Sign Up</Title>\n          <SubTitle>\n            Sign up your account via email and password.\n          </SubTitle>\n        </FormHeader>\n        {error && <ErrorMessage>{error}</ErrorMessage>}\n        <FlashForm>\n          <CustomButton\n            type=\"button\"\n            icon={<FaGooglePlusG />}\n            size=\"small\"\n            color=\"white\"\n            bgColor=\"#EA4335\"\n            variant=\"contained\"\n            onClick={() => {}}\n            positionIcon=\"after\"\n          >\n            Sign In\n          </CustomButton>\n          <CustomButton\n            type=\"button\"\n            icon={<FaFacebookF />}\n            size=\"small\"\n            color=\"white\"\n            bgColor=\"#4267B2\"\n            variant=\"contained\"\n            onClick={() => {}}\n            positionIcon=\"after\"\n          >\n            Sign In\n          </CustomButton>\n        </FlashForm>\n        <FormGroups>\n          {formInputArray.map(\n            ({\n              label,\n              name,\n              touched,\n              type,\n              valid,\n              validation,\n              validationErrors,\n              value,\n            }) => (\n              <CustomInput\n                key={name}\n                type={type}\n                name={name}\n                value={value}\n                label={label}\n                onChange={(e) => this.handleChange(e, name)}\n                require={validation.required}\n                touched={touched}\n                valid={valid}\n                validationErrors={validationErrors}\n              />\n            )\n          )}\n          {loaded && <GoogleRecaptcha onChange={this.handleChangeGoogleRecaptcha}/>}\n          <CustomButton\n            variant=\"outlined\"\n            size=\"small\"\n            color=\"#0d47a1\"\n            bgColor=\"blue\"\n            disabled={!formIsValid || disabled}\n            styled={{marginTop : \"1rem\"}}\n          >\n            Submit\n          </CustomButton>\n        </FormGroups>\n        <FormActions>\n          <Option>\n            <StyledLink to=\"/auth/signin\">Signin account</StyledLink>\n          </Option>\n          <Option>\n            Forgot password ?{\" \"}\n            <StyledLink to=\"/auth/restore-account\">\n              Get Password Again.\n            </StyledLink>\n          </Option>\n        </FormActions>\n      </CustomFormContainer>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  error : selectUserError\n})\n\nconst mapDispatchToProps = dispatch => ({\n  registerStart : (name,email,password) => dispatch(registerStart(name,email,password))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(SignUp));\n"]},"metadata":{},"sourceType":"module"}